[{"C:\\wamp64\\www\\tbpos\\src\\main.js":"1","C:\\wamp64\\www\\tbpos\\src\\front\\src\\App.vue":"2","C:\\wamp64\\www\\tbpos\\src\\front\\src\\router.js":"3","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderDetails.vue":"4","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderOverview.vue":"5","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\ClientOverview.vue":"6","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\LoginComponent.vue":"7","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\HeaderComponent.vue":"8","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\ErrorPopup.vue":"9","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\CashRegister.vue":"10","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\SidebarComponent.vue":"11","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderSummary.vue":"12"},{"size":249,"mtime":1737975007308,"results":"13","hashOfConfig":"14"},{"size":17956,"mtime":1737037467841,"results":"15","hashOfConfig":"16"},{"size":753,"mtime":1737468059937,"results":"17","hashOfConfig":"16"},{"size":4802,"mtime":1733240424089,"results":"18","hashOfConfig":"16"},{"size":5625,"mtime":1733145692376,"results":"19","hashOfConfig":"16"},{"size":3799,"mtime":1737557077116,"results":"20","hashOfConfig":"16"},{"size":3666,"mtime":1732536814300,"results":"21","hashOfConfig":"16"},{"size":4588,"mtime":1736955564576,"results":"22","hashOfConfig":"16"},{"size":504,"mtime":1730900042753,"results":"23","hashOfConfig":"16"},{"size":1321,"mtime":1732112940908,"results":"24","hashOfConfig":"16"},{"size":1053,"mtime":1737467977245,"results":"25","hashOfConfig":"16"},{"size":25538,"mtime":1736950666693,"results":"26","hashOfConfig":"16"},{"filePath":"27","messages":"28","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"1y0ng7v",{"filePath":"30","messages":"31","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"ao3074",{"filePath":"33","messages":"34","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"C:\\wamp64\\www\\tbpos\\src\\main.js",["63"],"import { createApp } from \"vue\";\r\nimport router from \"./front/src/router.js\";\r\nimport App from \"./front/src/App.vue\";\r\n\r\nwindow.startPOS = (element, config) => {\r\n  const app = createApp(App, config);\r\n  app.use(router);\r\n  app.mount(element);\r\n};\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\App.vue",["64"],"<template>\r\n  <div>\r\n    <LoginComponent\r\n      v-if=\"!token\"\r\n      :api-base-url=\"apiBaseUrl\"\r\n      :translations=\"translations\"\r\n      @login-success=\"setToken\"\r\n    />\r\n    <div v-else>\r\n      <HeaderComponent\r\n        :api-base-url=\"apiBaseUrl\"\r\n        :translations=\"translations\"\r\n        :disable-focus=\"disableFocus\"\r\n        :token=\"token\"\r\n        :user=\"user\"\r\n        @product-scanned=\"addProductToOrder\"\r\n        @logout=\"logout\"\r\n      />\r\n      <div class=\"container-fluid main-content\">\r\n        <div class=\"row\">\r\n          <div class=\"col-2\">\r\n            <SidebarComponent />\r\n          </div>\r\n          <div class=\"col-5\" style=\"padding: 20px\">\r\n            <router-view\r\n              :api-base-url=\"apiBaseUrl\"\r\n              :orderItems=\"orderItems\"\r\n              :translations=\"translations\"\r\n              :token=\"token\"\r\n              @focus-state-change=\"updateFocusState\"\r\n            />\r\n          </div>\r\n          <div class=\"col-5\">\r\n            <CashRegister\r\n              :api-base-url=\"apiBaseUrl\"\r\n              :orderItems=\"orderItems\"\r\n              :translations=\"translations\"\r\n              :token=\"token\"\r\n              @remove-item=\"removeProductFromOrder\"\r\n              @update-quantity=\"updateItemQuantity\"\r\n              @set-quantity=\"setItemQuantity\"\r\n              @clear-order-items=\"clearOrderItems\"\r\n              @modal-state-change=\"updateModalState\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ErrorPopup ref=\"errorPopup\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport LoginComponent from \"./components/LoginComponent.vue\";\r\nimport CashRegister from \"./components/CashRegister.vue\";\r\nimport HeaderComponent from \"./components/HeaderComponent.vue\";\r\nimport SidebarComponent from \"./components/SidebarComponent.vue\";\r\nimport ErrorPopup from \"./components/ErrorPopup.vue\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  components: {\r\n    LoginComponent,\r\n    CashRegister,\r\n    HeaderComponent,\r\n    SidebarComponent,\r\n    ErrorPopup,\r\n  },\r\n  watch: {\r\n    token(newToken) {\r\n      if (newToken) {\r\n        // If the user logs in, start tracking inactivity\r\n        this.setupInactivityListener();\r\n      } else {\r\n        // If the user logs out, stop tracking inactivity\r\n        this.cleanupInactivityListener();\r\n      }\r\n    },\r\n  },\r\n  props: {\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      orderItems: [],\r\n      token: null,\r\n      user: null,\r\n      disableFocus: false,\r\n      inactivityTimeout: null,\r\n      tokenExpirationTime: null, // Timestamp when the token will expire\r\n      tokenExchangeTimeout: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchCurrentOrder() {\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/orders/current`, {\r\n          headers: { Authorization: `Bearer ${this.token}` },\r\n        });\r\n\r\n        // Extract lines safely\r\n        const cart = response.data?.data?.cart;\r\n        if (cart && Array.isArray(cart.lines)) {\r\n          this.orderItems = cart.lines.map((line) => ({\r\n            product_id: line.product_id,\r\n            refcode: line.reference,\r\n            name: line.name,\r\n            price_tax_incl: line.price_tax_incl,\r\n            price_tax_excl: line.price_tax_excl,\r\n            quantity: line.quantity,\r\n            image_url: line.image_url,\r\n          }));\r\n        } else {\r\n          console.warn(\"No cart or lines data available in the response.\");\r\n          this.orderItems = [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching current order:\", error);\r\n      }\r\n    },\r\n    async addProductToOrder(product) {\r\n      // Find if the product is already in the order\r\n      let existingItem = this.orderItems.find(\r\n        (item) => item.refcode === product.refcode\r\n      );\r\n\r\n      // Check local stock before making the API call\r\n      if (existingItem && existingItem.quantity + 1 > product.stock) {\r\n        alert(`Cannot add more than available stock of ${product.stock}`);\r\n        return; // Exit without updating if it exceeds stock\r\n      } else if (!existingItem && product.stock < 1) {\r\n        alert(this.translations.outOfStock);\r\n        return;\r\n      }\r\n\r\n      // Make the API request to add the product to the order\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/add-product-to-order`,\r\n          { refcode: product.refcode, quantity: 1 },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        // Check response for OUT_OF_STOCK error\r\n        if (\r\n          response.data.status === \"fail\" &&\r\n          response.data.data.code === \"OUT_OF_STOCK\"\r\n        ) {\r\n          const quantityAvailable = response.data.data.quantityAvailable;\r\n          alert(\r\n            `Only ${quantityAvailable} items are available in stock. Please adjust your quantity.`\r\n          );\r\n\r\n          // Adjust existing item quantity in UI to match available stock\r\n          if (existingItem) {\r\n            existingItem.quantity = quantityAvailable;\r\n          }\r\n          return; // Exit without adding further items\r\n        }\r\n\r\n        // If the response is successful, update orderItems in the UI\r\n        if (existingItem) {\r\n          existingItem.quantity += 1;\r\n        } else {\r\n          this.orderItems.push({\r\n            ...product,\r\n            quantity: 1,\r\n          });\r\n        }\r\n\r\n        console.log(\"Updated order summary:\", response.data);\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 422) {\r\n          this.$refs.errorPopup.showPopup(this.translations.outOfStock);\r\n        } else {\r\n          console.error(\"Error adding product to order:\", error);\r\n        }\r\n      }\r\n    },\r\n    async removeProductFromOrder(refcode) {\r\n      const previousItems = [...this.orderItems];\r\n      this.orderItems = this.orderItems.filter(\r\n        (item) => item.refcode !== refcode\r\n      );\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/delete-product-from-order`,\r\n          {\r\n            refcode: refcode,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (response.data.status === \"success\") {\r\n          console.log(\"Item successfully deleted from the order.\");\r\n        } else if (response.data.status === \"fail\") {\r\n          this.handleError(response.data.data);\r\n          this.orderItems = previousItems; // Restore previous items\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error removing product from order:\", error);\r\n        this.orderItems = previousItems; // Restore previous items\r\n      }\r\n    },\r\n    async updateItemQuantity({ refcode, quantity }) {\r\n      const itemIndex = this.orderItems.findIndex(\r\n        (item) => item.refcode === refcode\r\n      );\r\n\r\n      if (itemIndex !== -1) {\r\n        const item = this.orderItems[itemIndex];\r\n        const newQuantity = item.quantity + quantity;\r\n\r\n        // If the quantity is zero, call removeProductFromOrder and exit\r\n        if (newQuantity <= 0) {\r\n          this.removeProductFromOrder(refcode); // Call remove method\r\n          return; // Exit the function without further processing\r\n        }\r\n\r\n        // Check stock before updating\r\n        if (newQuantity > item.stock) {\r\n          alert(`Cannot update quantity. Available stock is ${item.stock}.`);\r\n          return; // Exit without updating if it exceeds stock\r\n        }\r\n\r\n        // Make the API call to update quantity\r\n        try {\r\n          const response = await axios.post(\r\n            `${this.apiBaseUrl}/orders/change-quantity`,\r\n            { refcode: refcode, quantity: newQuantity },\r\n            {\r\n              headers: { Authorization: `Bearer ${this.token}` },\r\n            }\r\n          );\r\n\r\n          // Check for OUT_OF_STOCK error in response\r\n          if (\r\n            response.data.status === \"fail\" &&\r\n            response.data.data.code === \"OUT_OF_STOCK\"\r\n          ) {\r\n            const quantityAvailable = response.data.data.quantityAvailable;\r\n            alert(\r\n              `Only ${quantityAvailable} items are available in stock. Please adjust your quantity.`\r\n            );\r\n\r\n            // Adjust the item quantity if it exceeds available stock\r\n            item.quantity = quantityAvailable;\r\n            return; // Exit without adding further items\r\n          }\r\n\r\n          // If the response is successful, update the orderItems in the UI\r\n          item.quantity = newQuantity;\r\n\r\n          console.log(\"Updated order summary:\", response.data);\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 422) {\r\n            this.$refs.errorPopup.showPopup(this.translations.outOfStock);\r\n          } else {\r\n            console.error(\"Error updating product quantity:\", error);\r\n          }\r\n        }\r\n      } else {\r\n        console.error(`Item with refcode ${refcode} not found in the order.`);\r\n      }\r\n    },\r\n    async setItemQuantity({ refcode, setQuantity }) {\r\n      const itemIndex = this.orderItems.findIndex(\r\n        (item) => item.refcode === refcode\r\n      );\r\n\r\n      if (itemIndex !== -1) {\r\n        const item = this.orderItems[itemIndex];\r\n\r\n        // Check if the requested quantity exceeds stock\r\n        if (setQuantity > item.stock) {\r\n          this.$refs.errorPopup.showPopup(\r\n            `Requested quantity of ${setQuantity} exceeds available stock of ${item.stock}.`\r\n          );\r\n          return; // Prevent further processing if quantity exceeds stock\r\n        }\r\n\r\n        // API call to update quantity on the server\r\n        try {\r\n          const response = await axios.post(\r\n            `${this.apiBaseUrl}/orders/change-quantity`,\r\n            { refcode: refcode, quantity: setQuantity },\r\n            {\r\n              headers: { Authorization: `Bearer ${this.token}` },\r\n            }\r\n          );\r\n\r\n          // Handle stock errors from the API response\r\n          if (\r\n            response.data.status === \"fail\" &&\r\n            response.data.data.code === \"OUT_OF_STOCK\"\r\n          ) {\r\n            const quantityAvailable = response.data.data.quantityAvailable;\r\n            this.$refs.errorPopup.showPopup(\r\n              `Only ${quantityAvailable} items are available. Adjusting quantity to available stock.`\r\n            );\r\n            item.quantity = quantityAvailable; // Set quantity to available stock\r\n            return; // Exit if out of stock\r\n          }\r\n\r\n          // If the response is successful, update the orderItems in the UI\r\n          item.quantity = setQuantity;\r\n          console.log(\"Quantity successfully updated:\", response.data);\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 422) {\r\n            this.$refs.errorPopup.showPopup(this.translations.outOfStock);\r\n          } else {\r\n            console.error(\"Error updating quantity:\", error);\r\n          }\r\n        }\r\n      } else {\r\n        console.error(`Item with refcode ${refcode} not found in the order.`);\r\n      }\r\n    },\r\n    clearOrderItems() {\r\n      this.orderItems = [];\r\n    },\r\n    updateModalState(state) {\r\n      this.disableFocus = state; // Disable focus when modal is shown\r\n    },\r\n    updateFocusState(isFocused) {\r\n      this.disableFocus = isFocused;\r\n    },\r\n    logout() {\r\n      // Remove the token and workstation from localStorage\r\n      this.clearTokenData();\r\n    },\r\n    resetInactivityTimer() {\r\n      // Clear the existing timeout\r\n      if (this.inactivityTimeout) {\r\n        clearTimeout(this.inactivityTimeout);\r\n      }\r\n\r\n      // Set a new timeout for 15 minutes\r\n      this.inactivityTimeout = setTimeout(() => {\r\n        this.logout();\r\n      }, 15 * 60 * 1000); // 15 minutes in milliseconds\r\n    },\r\n    setupInactivityListener() {\r\n      // Events that reset the inactivity timer\r\n      const events = [\"mousemove\", \"keydown\", \"click\", \"scroll\"];\r\n\r\n      // Add listeners to reset the timer on user interaction\r\n      events.forEach((event) => {\r\n        window.addEventListener(event, this.resetInactivityTimer);\r\n      });\r\n\r\n      // Start the initial inactivity timer\r\n      this.resetInactivityTimer();\r\n    },\r\n    cleanupInactivityListener() {\r\n      // Clear the timeout\r\n      if (this.inactivityTimeout) {\r\n        clearTimeout(this.inactivityTimeout);\r\n      }\r\n\r\n      // Remove event listeners\r\n      const events = [\"mousemove\", \"keydown\", \"click\", \"scroll\"];\r\n      events.forEach((event) => {\r\n        window.removeEventListener(event, this.resetInactivityTimer);\r\n      });\r\n    },\r\n    async setToken(token, isExchange = false) {\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/token`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n\r\n        if (response.data.status === \"success\") {\r\n          const { firstname, lastname, token: tokenData } = response.data.data;\r\n          const { expiresIn } = tokenData; // Extract expiresIn from the token object\r\n\r\n          this.token = token;\r\n          this.user = { firstName: firstname, lastName: lastname };\r\n\r\n          console.log(\"ExpiresIn received:\", expiresIn);\r\n          console.log(\"Full API response:\", response.data);\r\n\r\n          // Calculate and store the token expiration time\r\n          this.tokenExpirationTime = Date.now() + expiresIn * 1000;\r\n          localStorage.setItem(\"authToken\", token);\r\n          localStorage.setItem(\"userFirstName\", firstname);\r\n          localStorage.setItem(\"userLastName\", lastname);\r\n          localStorage.setItem(\"tokenExpirationTime\", this.tokenExpirationTime);\r\n\r\n          // Schedule token exchange if it's not during an exchange call\r\n          if (!isExchange) {\r\n            this.scheduleTokenExchange(expiresIn);\r\n          }\r\n          return true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error validating token:\", error);\r\n      }\r\n\r\n      this.clearTokenData();\r\n      return false;\r\n    },\r\n    scheduleTokenExchange(expiresIn) {\r\n      if (!expiresIn || isNaN(expiresIn)) {\r\n        console.error(\r\n          \"Invalid expiresIn value. Cannot schedule token exchange.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      const exchangeInMs = (expiresIn - 300) * 1000;\r\n\r\n      if (exchangeInMs <= 0) {\r\n        console.warn(\"Token has less than 60 seconds. Exchanging immediately.\");\r\n        this.exchangeToken();\r\n        return;\r\n      }\r\n\r\n      if (this.tokenExchangeTimeout) {\r\n        clearTimeout(this.tokenExchangeTimeout);\r\n      }\r\n\r\n      this.tokenExchangeTimeout = setTimeout(() => {\r\n        this.exchangeToken();\r\n      }, exchangeInMs);\r\n\r\n      console.log(\r\n        `Token exchange scheduled in ${(exchangeInMs / 1000).toFixed(\r\n          1\r\n        )} seconds.`\r\n      );\r\n    },\r\n    async exchangeToken() {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/token/exchange`,\r\n          {},\r\n          {\r\n            headers: { Authorization: `Bearer ${this.token}` },\r\n          }\r\n        );\r\n\r\n        if (response.status === 200) {\r\n          const newToken = response.data.data.token.value;\r\n          console.log(\"Token exchanged successfully.\");\r\n          await this.setToken(newToken, true); // Pass true to avoid rescheduling\r\n        } else {\r\n          console.warn(\"Token exchange failed. Logging out.\");\r\n          this.logout();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error exchanging token:\", error);\r\n        this.logout();\r\n      }\r\n    },\r\n    clearTokenData() {\r\n      this.token = null;\r\n      this.user = null;\r\n      this.tokenExpirationTime = null;\r\n\r\n      localStorage.removeItem(\"authToken\");\r\n      localStorage.removeItem(\"userFirstName\");\r\n      localStorage.removeItem(\"userLastName\");\r\n      localStorage.removeItem(\"tokenExpirationTime\");\r\n\r\n      if (this.tokenExchangeTimeout) clearTimeout(this.tokenExchangeTimeout);\r\n    },\r\n    handleError(errorData) {\r\n      switch (errorData.code) {\r\n        case \"NOT_FOUND\":\r\n          console.error(\"Product not found:\", errorData.message);\r\n          break;\r\n        case \"BAD_REQUEST\":\r\n          console.error(\"Bad request:\", errorData.message);\r\n          break;\r\n        case \"OUT_OF_STOCK\":\r\n          console.error(\"Out of stock:\", errorData.message);\r\n          alert(\"This product is currently out of stock.\");\r\n          break;\r\n        case \"MINIMAL_QUANTITY_REQUIRED\":\r\n          console.error(\"Minimum quantity required:\", errorData.message);\r\n          break;\r\n        default:\r\n          console.error(\"An unknown error occurred.\");\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    const storedToken = localStorage.getItem(\"authToken\");\r\n    const storedExpirationTime = parseInt(\r\n      localStorage.getItem(\"tokenExpirationTime\"),\r\n      10\r\n    );\r\n\r\n    if (storedToken && storedExpirationTime > Date.now()) {\r\n      const expiresIn = (storedExpirationTime - Date.now()) / 1000;\r\n\r\n      this.setToken(storedToken).then((isValid) => {\r\n        if (isValid) {\r\n          this.scheduleTokenExchange(expiresIn);\r\n          this.fetchCurrentOrder(); // Fetch order only if token is valid\r\n        } else {\r\n          console.warn(\"Stored token is invalid. Logging out.\");\r\n          this.logout();\r\n        }\r\n      });\r\n    } else {\r\n      console.warn(\"No valid token found. Redirecting to login.\");\r\n      this.logout();\r\n    }\r\n    if (this.token) {\r\n      this.fetchCurrentOrder();\r\n      this.setupInactivityListener();\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    if (this.tokenExchangeTimeout) {\r\n      clearTimeout(this.tokenExchangeTimeout); // Clean up the timer\r\n    }\r\n    this.cleanupInactivityListener();\r\n  },\r\n};\r\n</script>\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\router.js",["65"],"import { createRouter, createWebHistory } from \"vue-router\";\r\nimport OrderOverview from \"./components/OrderOverview.vue\";\r\nimport OrderDetails from \"./components/OrderDetails.vue\";\r\nimport ClientOverview from \"./components/ClientOverview.vue\";\r\n\r\nconst routes = [\r\n  {\r\n    path: \"/index.html\",\r\n    name: \"Home\",\r\n    props: true,\r\n  },\r\n  {\r\n    path: \"/bestellingen\",\r\n    name: \"Bestellingen\",\r\n    component: OrderOverview,\r\n  },\r\n  {\r\n    path: \"/bestellingen/:id\",\r\n    name: \"OrderDetails\",\r\n    component: OrderDetails,\r\n    props: true,\r\n  },\r\n  {\r\n    path: \"/klanten\",\r\n    name: \"Klanten\",\r\n    component: ClientOverview,\r\n  },\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(),\r\n  routes,\r\n});\r\n\r\nexport default router;\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderDetails.vue",["66"],"<template>\r\n  <div class=\"order-details-container\">\r\n    <div v-if=\"order\" class=\"order-details-content\">\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <h2>Bestelgegevens - ID: {{ order.id }}</h2>\r\n        <button class=\"print-order-btn btn\" @click=\"handlePrint\">\r\n          <i class=\"fas fa-print me-2\"></i> Print Bestelling\r\n        </button>\r\n      </div>\r\n      <table class=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Referentie</th>\r\n            <th>Klant</th>\r\n            <th>Datum</th>\r\n            <th>Totaal</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{{ order.reference }}</td>\r\n            <td>{{ order.customer || \"Geen klantinformatie\" }}</td>\r\n            <td>{{ order.date }}</td>\r\n            <td>€{{ order.total_tax_incl.toFixed(2) }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <h3>Gekochte artikelen</h3>\r\n      <div v-if=\"order.lines && order.lines.length > 0\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Afbeelding</th>\r\n              <th>Naam</th>\r\n              <th>Referentie</th>\r\n              <th>Aantal</th>\r\n              <th>Prijs</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"item in order.lines\" :key=\"item.product_id\">\r\n              <td>\r\n                <img\r\n                  :src=\"item.image_url\"\r\n                  alt=\"Product afbeelding\"\r\n                  style=\"max-width: 50px\"\r\n                />\r\n              </td>\r\n              <td>{{ item.name }}</td>\r\n              <td>{{ item.reference }}</td>\r\n              <td>{{ item.quantity }}</td>\r\n              <td>€{{ item.price_tax_incl.toFixed(2) }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div v-else>\r\n        <p>Geen artikelen gevonden in deze bestelling.</p>\r\n      </div>\r\n      <button @click=\"goToOrderOverview\" class=\"back-to-orders-btn btn mt-3\">\r\n        <i class=\"fas fa-arrow-left me-1\"></i> Terug naar Bestellingen\r\n      </button>\r\n    </div>\r\n    <div v-else>\r\n      <p>Bezig met het laden van Bestelgegevens...</p>\r\n    </div>\r\n\r\n    <!-- Popup for Print Type -->\r\n    <div v-if=\"showPopup\" class=\"popup-overlay\" @click=\"closePopup\">\r\n      <div class=\"popup-message\" @click.stop>\r\n        <h3>Kies het type document:</h3>\r\n        <button @click=\"printDocument('INVOICE')\">Factuur</button>\r\n        <button @click=\"printDocument('RECEIPT')\">Bon</button>\r\n        <button @click=\"closePopup\">Annuleren</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"OrderDetails\",\r\n  props: {\r\n    id: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    token: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      order: null,\r\n      showPopup: false, // Controls the visibility of the popup\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchOrderDetails();\r\n  },\r\n  methods: {\r\n    async fetchOrderDetails() {\r\n      try {\r\n        const response = await axios.get(\r\n          `${this.apiBaseUrl}/orders/${this.id}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        this.order = response.data.data || null;\r\n      } catch (error) {\r\n        console.error(\"Fout bij het ophalen van orderdetails:\", error);\r\n        this.order = null;\r\n      }\r\n    },\r\n    handlePrint() {\r\n      this.showPopup = true;\r\n    },\r\n    closePopup() {\r\n      this.showPopup = false;\r\n    },\r\n    async printDocument(printType) {\r\n      if (!this.order || !this.order.id) {\r\n        console.error(\"Fout: Geen order ID beschikbaar.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/print-document`,\r\n          {\r\n            order_id: this.order.id,\r\n            print_type: printType,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        console.log(\"Printen succesvol:\", response.data);\r\n        alert(\"Document succesvol geprint!\");\r\n        this.closePopup(); // Close the popup after printing\r\n      } catch (error) {\r\n        console.error(\"Fout bij het printen:\", error.response?.data || error);\r\n        alert(\"Er is een fout opgetreden bij het printen van het document.\");\r\n        this.closePopup(); // Close the popup on error\r\n      }\r\n    },\r\n    goToOrderOverview() {\r\n      this.$router.push({ name: \"Bestellingen\" });\r\n    },\r\n  },\r\n};\r\n</script>\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderOverview.vue",["67"],"<template>\r\n  <div class=\"order-overview-container\">\r\n    <h2>Bestellingen</h2>\r\n\r\n    <!-- Search Bar -->\r\n    <div class=\"search-bar-order-overview mb-3\">\r\n      <div class=\"input-group\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          v-model=\"searchQuery\"\r\n          placeholder=\"Zoek op ID, Referentie, Klant of Datum\"\r\n          @focus=\"$emit('focus-state-change', true)\"\r\n          @blur=\"$emit('focus-state-change', false)\"\r\n          @input=\"onSearchInput\"\r\n        />\r\n        <span class=\"input-group-text\">\r\n          <i class=\"fas fa-search\"></i>\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"filteredOrders.length === 0\">\r\n      <p>Geen bestellingen gevonden.</p>\r\n    </div>\r\n    <div v-else>\r\n      <table class=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Referentie</th>\r\n            <th>Klant</th>\r\n            <th>Betaling</th>\r\n            <th>Datum</th>\r\n            <th>Totaal</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr\r\n            v-for=\"order in paginatedOrders.filter((order) => order)\"\r\n            :key=\"order.id\"\r\n            @click=\"\r\n              $router.push({ name: 'OrderDetails', params: { id: order.id } })\r\n            \"\r\n            style=\"cursor: pointer\"\r\n          >\r\n            <td>{{ order.id }}</td>\r\n            <td>{{ order.reference }}</td>\r\n            <td>{{ order.customer }}</td>\r\n            <td>{{ order.payment_method }}</td>\r\n            <td>{{ order.date }}</td>\r\n            <td>€{{ (order.total_tax_incl || 0).toFixed(2) }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- Pagination Controls -->\r\n      <nav>\r\n        <ul class=\"pagination justify-content-center\">\r\n          <li class=\"page-item\" :class=\"{ disabled: currentPage === 1 }\">\r\n            <button class=\"page-link\" @click=\"goToPage(currentPage - 1)\">\r\n              Vorige\r\n            </button>\r\n          </li>\r\n\r\n          <!-- Dynamically display pages -->\r\n          <li\r\n            v-for=\"page in pageRange\"\r\n            :key=\"page\"\r\n            class=\"page-item\"\r\n            :class=\"{ active: page === currentPage }\"\r\n          >\r\n            <button class=\"page-link\" @click=\"goToPage(page)\">\r\n              {{ page }}\r\n            </button>\r\n          </li>\r\n\r\n          <li\r\n            class=\"page-item\"\r\n            :class=\"{ disabled: currentPage === totalPages }\"\r\n          >\r\n            <button class=\"page-link\" @click=\"goToPage(currentPage + 1)\">\r\n              Volgende\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"OrderOverview\",\r\n  props: {\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    token: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      searchQuery: \"\",\r\n      currentPage: 1,\r\n      ordersPerPage: 8, // Display 8 orders per page\r\n      totalItems: 0, // To track the total number of items\r\n    };\r\n  },\r\n  computed: {\r\n    filteredOrders() {\r\n      // Only filter locally if there's no API-based search\r\n      if (this.searchQuery) {\r\n        const query = this.searchQuery.toLowerCase();\r\n        return this.orders.filter((order) => {\r\n          return (\r\n            order.id.toString().includes(query) ||\r\n            order.reference.toLowerCase().includes(query) ||\r\n            order.customer.toLowerCase().includes(query) ||\r\n            order.date.toLowerCase().includes(query)\r\n          );\r\n        });\r\n      }\r\n      return this.orders; // Use the API-provided paginated results if no local search\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.totalItems / this.ordersPerPage);\r\n    },\r\n    pageRange() {\r\n      let range = [];\r\n      const maxPagesToShow = 10;\r\n      const startPage = Math.max(1, this.currentPage - 4);\r\n      const endPage = Math.min(this.totalPages, startPage + maxPagesToShow - 1);\r\n\r\n      for (let page = startPage; page <= endPage; page++) {\r\n        range.push(page);\r\n      }\r\n\r\n      return range;\r\n    },\r\n    paginatedOrders() {\r\n      return this.filteredOrders; // Directly return filtered orders\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchOrders(); // Fetch orders on component mount\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/orders`, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.token}`,\r\n          },\r\n          params: {\r\n            searchterm: this.searchQuery,\r\n            page: this.currentPage,\r\n            per_page: this.ordersPerPage,\r\n          },\r\n        });\r\n\r\n        console.log(\"API Response:\", response.data);\r\n        this.orders = response.data.data.list; // API paginated data\r\n        this.totalItems = response.data.data.pagination.total_items;\r\n\r\n        console.log(\"Orders for Page:\", this.currentPage, this.orders);\r\n      } catch (error) {\r\n        console.error(\"Fout bij het ophalen van bestellingen:\", error);\r\n      }\r\n    },\r\n    onSearchInput() {\r\n      // Reset current page to 1 when search is updated\r\n      this.currentPage = 1;\r\n      this.fetchOrders(); // Fetch orders again on search change\r\n    },\r\n    goToPage(page) {\r\n      if (page > 0 && page <= this.totalPages) {\r\n        this.currentPage = page;\r\n        this.fetchOrders(); // Fetch orders again when page is changed\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\ClientOverview.vue",["68"],"<template>\r\n  <div class=\"client-overview\">\r\n    <h2>Klanten</h2>\r\n    <div class=\"mb-3\">\r\n      <div class=\"input-group\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          v-model=\"searchQuery\"\r\n          placeholder=\"Zoek op Naam, Emailadres of Adres\"\r\n          @focus=\"$emit('focus-state-change', true)\"\r\n          @blur=\"$emit('focus-state-change', false)\"\r\n          @input=\"onSearchInput\"\r\n        />\r\n        <span class=\"input-group-text\">\r\n          <i class=\"fas fa-search\"></i>\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <ul class=\"client-list\">\r\n      <li\r\n        v-for=\"client in clients\"\r\n        :key=\"client.id\"\r\n        :class=\"{ 'client-item': true, expanded: expandedClient === client.id }\"\r\n        @click=\"toggleDetails(client.id)\"\r\n      >\r\n        <p class=\"client-name\">{{ client.name }}</p>\r\n        <p class=\"client-email\">{{ client.email }}</p>\r\n        <div v-if=\"expandedClient === client.id\" class=\"client-details\">\r\n          <p><strong>Adres:</strong> {{ client.address }}</p>\r\n          <p><strong>Land:</strong> {{ client.country }}</p>\r\n          <p><strong>Telefoonnummer(s):</strong> {{ client.phone }}</p>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"ClientOverview\",\r\n  data() {\r\n    return {\r\n      searchQuery: \"\",\r\n      expandedClient: null, // Tracks which client is expanded\r\n      clients: [\r\n        {\r\n          id: 1,\r\n          name: \"Jan Jansen\",\r\n          email: \"jan.jansen@example.com\",\r\n          address: \"Stationsstraat 12, 1012 AB Amsterdam\",\r\n          country: \"Netherlands\",\r\n          phone: \"+31 6 12345678\",\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"Piet Pietersen\",\r\n          email: \"piet.pietersen@example.com\",\r\n          address: \"Kerkstraat 45, 1234 CD Utrecht\",\r\n          country: \"Netherlands\",\r\n          phone: \"+31 6 87654321\",\r\n        },\r\n        {\r\n          id: 3,\r\n          name: \"Anna de Vries\",\r\n          email: \"anna.devries@example.com\",\r\n          address: \"Herenstraat 8, 2345 EF Rotterdam\",\r\n          country: \"Netherlands\",\r\n          phone: \"+31 6 23456789\",\r\n        },\r\n        {\r\n          id: 4,\r\n          name: \"Leon de Jong\",\r\n          email: \"leon.dejong@example.com\",\r\n          address: \"Prinsengracht 56, 3456 GH Haarlem\",\r\n          country: \"Netherlands\",\r\n          phone: \"+31 6 34567890\",\r\n        },\r\n        {\r\n          id: 7,\r\n          name: \"Lars Smit\",\r\n          email: \"lars.smit@example.com\",\r\n          address: \"Waterkant 33, 6789 MN Antwerpen\",\r\n          country: \"Belgium\",\r\n          phone: \"+31 6 67890123\",\r\n        },\r\n      ],\r\n    };\r\n  },\r\n  methods: {\r\n    toggleDetails(clientId) {\r\n      // Toggle the visibility of details\r\n      this.expandedClient = this.expandedClient === clientId ? null : clientId;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.client-overview {\r\n  padding: 20px;\r\n}\r\n\r\nh2 {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.client-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.client-item {\r\n  padding: 10px 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  margin-bottom: 15px;\r\n  transition: background-color 0.3s ease, box-shadow 0.3s ease;\r\n  background-color: #fff;\r\n}\r\n\r\n.client-item:hover {\r\n  background-color: rgba(0, 138, 0, 0.16);\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.expanded {\r\n  background-color: rgba(0, 138, 0, 0.16);\r\n}\r\n\r\n.client-name {\r\n  color: #008a00;\r\n  font-size: 20px;\r\n  font-weight: 500;\r\n  margin: 0 0 10px 0;\r\n}\r\n\r\n.client-email {\r\n  margin: 0 0 10px 0;\r\n  font-size: 16px;\r\n  color: #555;\r\n}\r\n\r\n.client-details {\r\n  margin-top: 15px;\r\n  font-size: 15px;\r\n  color: #444;\r\n  line-height: 1.6;\r\n}\r\n\r\n.client-details p {\r\n  margin: 5px 0;\r\n}\r\n</style>\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\LoginComponent.vue",["69"],"<template>\r\n  <div class=\"login-container\">\r\n    <h2 class=\"login-title\">Login</h2>\r\n    <form @submit.prevent=\"handleLogin\" class=\"login-form\">\r\n      <div class=\"form-group\">\r\n        <label for=\"username\" class=\"form-label\">Gebruikersnaam</label>\r\n        <input\r\n          id=\"username\"\r\n          v-model=\"username\"\r\n          type=\"text\"\r\n          placeholder=\"Gebruikersnaam\"\r\n          class=\"form-input\"\r\n          required\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\" class=\"form-label\">Wachtwoord</label>\r\n        <input\r\n          id=\"password\"\r\n          v-model=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Wachtwoord\"\r\n          class=\"form-input\"\r\n          required\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"workstation\" class=\"form-label\">Kassa</label>\r\n        <select\r\n          v-model=\"workstationId\"\r\n          id=\"workstation\"\r\n          class=\"form-select\"\r\n          required\r\n        >\r\n          <option v-for=\"ws in workstations\" :key=\"ws.id\" :value=\"ws.id\">\r\n            {{ ws.name }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n      <button type=\"submit\" class=\"login-button\">Inloggen</button>\r\n    </form>\r\n    <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: \"\",\r\n      password: \"\",\r\n      role: \"cashier\",\r\n      workstationId: null,\r\n      workstations: [],\r\n      errorMessage: \"\",\r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      // Fetch workstations from the API\r\n      const response = await axios.get(\r\n        `${this.$props.apiBaseUrl}/workstations`\r\n      );\r\n      this.workstations = response.data.data;\r\n\r\n      // Check localStorage for a saved workstation ID\r\n      const savedWorkstationId = localStorage.getItem(\"lastWorkstationId\");\r\n      if (\r\n        savedWorkstationId &&\r\n        this.workstations.some((ws) => ws.id === savedWorkstationId)\r\n      ) {\r\n        this.workstationId = savedWorkstationId; // Preselect saved workstation\r\n      }\r\n    } catch (error) {\r\n      this.errorMessage = \"Failed to load workstations.\";\r\n    }\r\n  },\r\n  methods: {\r\n    async handleLogin() {\r\n      try {\r\n        if (!this.workstationId) {\r\n          this.errorMessage = \"Please select a workstation.\";\r\n          return;\r\n        }\r\n\r\n        const response = await axios.post(`${this.$props.apiBaseUrl}/users`, {\r\n          username: this.username,\r\n          password: this.password,\r\n          role: this.role,\r\n          workstationId: this.workstationId,\r\n        });\r\n\r\n        const { token, expiresIn } = response.data.data; // Ensure 'expiresIn' is included in the response\r\n        console.log(\"Token received from login:\", token); // Debugging\r\n\r\n        // Save the selected workstation in localStorage\r\n        localStorage.setItem(\"lastWorkstationId\", this.workstationId);\r\n\r\n        // Calculate and store token expiration time\r\n        const tokenExpirationTime = Date.now() + expiresIn * 1000; // Convert seconds to milliseconds\r\n        localStorage.setItem(\"tokenExpirationTime\", tokenExpirationTime);\r\n\r\n        // Emit token to parent component (app.vue)\r\n        this.$emit(\"login-success\", token.value);\r\n      } catch (error) {\r\n        this.errorMessage = this.translations.loginFailed;\r\n        console.error(\"Login error:\", error);\r\n      }\r\n    },\r\n  },\r\n  props: {\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n};\r\n</script>\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\HeaderComponent.vue",["70"],"<template>\r\n  <header>\r\n    <div class=\"header-content\">\r\n      <span class=\"header-title\">Point of Sale</span>\r\n      <div class=\"search-bar\">\r\n        <i class=\"fas fa-magnifying-glass search-icon\"></i>\r\n        <input\r\n          ref=\"searchInput\"\r\n          type=\"text\"\r\n          v-model=\"barcodeInput\"\r\n          @input=\"debouncedOnBarcodeInput\"\r\n          id=\"barcodeInput\"\r\n          placeholder=\"Zoek Product op Naam, Barcode, Product id\"\r\n        />\r\n        <i class=\"fas fa-barcode barcode-icon\"></i>\r\n      </div>\r\n\r\n      <div class=\"user-info\">\r\n        <i class=\"fas fa-user user-image\"></i>\r\n        <span>{{\r\n          user ? `${user.firstName} ${user.lastName}` : \"John Doe\"\r\n        }}</span>\r\n      </div>\r\n\r\n      <div class=\"user-signoff\">\r\n        <i class=\"fas fa-right-from-bracket user-signofficon\"></i>\r\n        <span @click=\"handleLogout\">Afmelden</span>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Popup for unknown barcode -->\r\n    <div v-if=\"showPopup\" class=\"popup-overlay\">\r\n      <div class=\"popup-message\">\r\n        <p>{{ this.translations.barcodeNotFound }}</p>\r\n        <button @click=\"closePopup\">Sluiten</button>\r\n      </div>\r\n    </div>\r\n  </header>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"HeaderComponent\",\r\n  props: {\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    disableFocus: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    token: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    user: {\r\n      type: Object,\r\n      default: () => null, // Default to null if no user is provided\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      barcodeInput: \"\",\r\n      showPopup: false,\r\n      debouncedOnBarcodeInput: null,\r\n      focusInterval: null,\r\n    };\r\n  },\r\n  watch: {\r\n    disableFocus(newValue) {\r\n      if (newValue) {\r\n        clearInterval(this.focusInterval); // Stop focusing\r\n      } else {\r\n        this.focusInterval = setInterval(this.maintainFocus, 100); // Resume focusing\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    debounce(func, wait) {\r\n      let timeout;\r\n      return function (...args) {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => func.apply(this, args), wait);\r\n      };\r\n    },\r\n    async fetchProduct(term, type = \"BARCODE\") {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/products/find`,\r\n          {\r\n            type,\r\n            term,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        const jsend = response.data;\r\n\r\n        if (jsend.status === \"success\" && jsend.data.length > 0) {\r\n          return jsend.data; // Return the list of products\r\n        } else {\r\n          return null; // No products found\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching product:\", error);\r\n        this.showPopup = true; // Show popup for fetch error\r\n        return null; // Return null if an error occurs\r\n      }\r\n    },\r\n    async onBarcodeInput() {\r\n      const term = this.barcodeInput.trim();\r\n      if (!term) return;\r\n\r\n      this.showPopup = false; // Hide any existing popups\r\n\r\n      // Determine the type of input\r\n      let type;\r\n      if (/^\\d+$/.test(term)) {\r\n        type = term.length === 12 || term.length === 13 ? \"BARCODE\" : \"ALL\";\r\n      } else if (term.match(/^[a-zA-Z0-9-]+$/)) {\r\n        type = \"REFERENCE\";\r\n      } else {\r\n        type = \"NAME\";\r\n      }\r\n\r\n      // Fetch product based on detected type\r\n      const products = await this.fetchProduct(term, type);\r\n\r\n      if (products && products.length > 0) {\r\n        const product = products[0]; // Handle multiple products (select first for now)\r\n        this.$emit(\"product-scanned\", product);\r\n        this.barcodeInput = \"\"; // Clear input\r\n      } else {\r\n        this.showPopup = true; // Show popup if no product found\r\n      }\r\n    },\r\n    closePopup() {\r\n      this.showPopup = false;\r\n      this.barcodeInput = \"\";\r\n    },\r\n    maintainFocus() {\r\n      if (!this.disableFocus) {\r\n        this.$refs.searchInput.focus();\r\n      }\r\n    },\r\n    handleLogout() {\r\n      this.$emit(\"logout\"); // Emit the logout event to App.vue\r\n    },\r\n  },\r\n  mounted() {\r\n    this.focusInterval = setInterval(this.maintainFocus, 100);\r\n    this.debouncedOnBarcodeInput = this.debounce(this.onBarcodeInput, 50);\r\n  },\r\n  beforeUnmount() {\r\n    clearInterval(this.focusInterval);\r\n  },\r\n};\r\n</script>\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\ErrorPopup.vue",["71"],"<template>\r\n  <div v-if=\"visible\" class=\"popup-overlay\">\r\n    <div class=\"popup-message\">\r\n      <p>{{ message }}</p>\r\n      <button @click=\"closePopup\">Sluiten</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      visible: false,\r\n      message: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    showPopup(message) {\r\n      this.message = message;\r\n      this.visible = true;\r\n    },\r\n    closePopup() {\r\n      this.visible = false;\r\n    },\r\n  },\r\n};\r\n</script>\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\CashRegister.vue",["72"],"<template>\r\n  <div>\r\n    <OrderSummary\r\n      :api-base-url=\"apiBaseUrl\"\r\n      :orderItems=\"orderItems\"\r\n      :translations=\"translations\"\r\n      :token=\"token\"\r\n      @remove-item=\"removeProductFromOrder\"\r\n      @update-quantity=\"updateItemQuantity\"\r\n      @set-quantity=\"setItemQuantity\"\r\n      @clear-order-items=\"forwardClearOrderItems\"\r\n      @modal-state-change=\"forwardModalStateChange\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport OrderSummary from \"./OrderSummary.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    OrderSummary,\r\n  },\r\n  props: {\r\n    orderItems: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    token: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  methods: {\r\n    removeProductFromOrder(refcode) {\r\n      this.$emit(\"remove-item\", refcode);\r\n    },\r\n    updateItemQuantity(payload) {\r\n      this.$emit(\"update-quantity\", payload);\r\n    },\r\n    setItemQuantity(payload) {\r\n      this.$emit(\"set-quantity\", payload);\r\n    },\r\n    forwardClearOrderItems() {\r\n      this.$emit(\"clear-order-items\");\r\n    },\r\n    forwardModalStateChange(state) {\r\n      this.$emit(\"modal-state-change\", state);\r\n    },\r\n  },\r\n};\r\n</script>\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\SidebarComponent.vue",["73"],"<template>\r\n  <aside class=\"sidebar\">\r\n    <nav>\r\n      <ul class=\"main-links\">\r\n        <li>\r\n          <router-link to=\"/index.html\"\r\n            ><i class=\"fas fa-home\"></i><span>Home</span>\r\n          </router-link>\r\n        </li>\r\n        <li>\r\n          <router-link to=\"/klanten\"\r\n            ><i class=\"fas fa-users\"></i><span>Klanten</span>\r\n          </router-link>\r\n        </li>\r\n        <li>\r\n          <router-link to=\"/bestellingen\">\r\n            <i class=\"fas fa-shopping-cart\"></i><span>Bestellingen</span>\r\n          </router-link>\r\n        </li>\r\n        <li>\r\n          <a href=\"#\"\r\n            ><i class=\"fas fa-chart-bar\"></i><span>Rapportage</span></a\r\n          >\r\n        </li>\r\n      </ul>\r\n      <div class=\"help-section\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\"\r\n              ><i class=\"fas fa-question-circle\"></i><span>Help</span></a\r\n            >\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  </aside>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"SidebarComponent\",\r\n};\r\n</script>\r\n","C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderSummary.vue",["74"],"<template>\r\n  <div class=\"order-summary\">\r\n    <div class=\"space\" style=\"height: 50px\"></div>\r\n    <div ref=\"orderList\" class=\"order-items-list\">\r\n      <div\r\n        v-for=\"item in orderItems\"\r\n        :key=\"item.refcode\"\r\n        :class=\"[\r\n          'order-item',\r\n          {\r\n            selected:\r\n              selectedProduct && selectedProduct.refcode === item.refcode,\r\n          },\r\n        ]\"\r\n        @click=\"selectProduct(item)\"\r\n      >\r\n        <img :src=\"item.image_url\" :alt=\"item.name\" class=\"product-image\" />\r\n\r\n        <div class=\"item-details\">\r\n          <div class=\"item-header\">\r\n            <span class=\"product-name\">{{ item.name }}</span>\r\n            <span class=\"product-price\">\r\n              €{{\r\n                item.price_tax_incl ? item.price_tax_incl.toFixed(2) : \"0.00\"\r\n              }}\r\n              <span style=\"font-weight: normal\">(incl. btw)</span>\r\n            </span>\r\n\r\n            <span class=\"product-price1\"\r\n              >€{{ item.price_tax_excl.toFixed(2) }}\r\n              <span style=\"font-weight: normal\">(excl. btw)</span></span\r\n            >\r\n          </div>\r\n\r\n          <div class=\"quantity-controls\">\r\n            <button\r\n              @click=\"\r\n                $emit('update-quantity', {\r\n                  refcode: item.refcode,\r\n                  quantity: -1,\r\n                })\r\n              \"\r\n              class=\"quantity-button\"\r\n            >\r\n              <i class=\"fa-solid fa-minus\"></i>\r\n            </button>\r\n            <div class=\"quantity-wrapper\">\r\n              <input\r\n                v-if=\"\r\n                  quantityEditable &&\r\n                  selectedProduct &&\r\n                  selectedProduct.refcode === item.refcode\r\n                \"\r\n                v-model=\"editableQuantity\"\r\n                type=\"number\"\r\n                class=\"editable-quantity\"\r\n                @click.stop\r\n              />\r\n              <button\r\n                v-if=\"\r\n                  quantityEditable &&\r\n                  selectedProduct &&\r\n                  selectedProduct.refcode === item.refcode\r\n                \"\r\n                @click=\"confirmQuantity\"\r\n                class=\"checkmark-button\"\r\n              >\r\n                <i class=\"fa-solid fa-check\"></i>\r\n              </button>\r\n              <div v-else class=\"quantity-counter\">{{ item.quantity }}</div>\r\n            </div>\r\n            <button\r\n              @click=\"\r\n                $emit('update-quantity', { refcode: item.refcode, quantity: 1 })\r\n              \"\r\n              class=\"quantity-button\"\r\n            >\r\n              <i class=\"fa-solid fa-plus\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <button @click=\"removeItem(item.refcode)\" class=\"delete-button\">\r\n          <i class=\"fa-solid fa-trash-can\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"scroll-spacer\"></div>\r\n    </div>\r\n\r\n    <div class=\"bottom-section\">\r\n      <div class=\"keyboard\">\r\n        <div class=\"keyboard-row\">\r\n          <button @click=\"setQuantityMode\">Aant.</button>\r\n          <button @click=\"handleKeyPress(1)\">1</button>\r\n          <button @click=\"handleKeyPress(2)\">2</button>\r\n          <button @click=\"handleKeyPress(3)\">3</button>\r\n        </div>\r\n        <div class=\"keyboard-row\">\r\n          <button @click=\"editFlatDiscount\">Prijs</button>\r\n          <button @click=\"handleKeyPress(4)\">4</button>\r\n          <button @click=\"handleKeyPress(5)\">5</button>\r\n          <button @click=\"handleKeyPress(6)\">6</button>\r\n        </div>\r\n        <div class=\"keyboard-row\">\r\n          <button @click=\"editDiscount\">%</button>\r\n          <button @click=\"handleKeyPress(7)\">7</button>\r\n          <button @click=\"handleKeyPress(8)\">8</button>\r\n          <button @click=\"handleKeyPress(9)\">9</button>\r\n        </div>\r\n        <div class=\"keyboard-row\">\r\n          <button @click=\"handleKeyPress('delete')\">Del</button>\r\n          <button>+/-</button>\r\n          <button @click=\"handleKeyPress(0)\">0</button>\r\n          <button @click=\"handleKeyPress('.')\">.</button>\r\n        </div>\r\n        <button class=\"customer-button\">\r\n          <div class=\"user-icon\">\r\n            <i class=\"fas fa-user\"></i>\r\n          </div>\r\n          Klant\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"summary-of-costs\">\r\n        <div class=\"cost-item\">\r\n          Subtotaal <span class=\"price\">€{{ subtotal.toFixed(2) }}</span>\r\n        </div>\r\n        <div class=\"cost-item\">\r\n          Korting\r\n          <span v-if=\"!discountEditable && !flatDiscountEditable\" class=\"price\">\r\n            €{{ discount.toFixed(2) }}\r\n          </span>\r\n\r\n          <!-- Percentage Discount Input -->\r\n          <div\r\n            class=\"discount-input-wrapper\"\r\n            :class=\"{ hidden: !discountEditable }\"\r\n          >\r\n            <input\r\n              v-model=\"discountPercentage\"\r\n              type=\"text\"\r\n              class=\"discount-input\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              step=\"1\"\r\n            />\r\n            <button\r\n              @click=\"confirmDiscount('percentage')\"\r\n              class=\"checkmark-button\"\r\n            >\r\n              <i class=\"fa-solid fa-check\"></i>\r\n            </button>\r\n          </div>\r\n\r\n          <!-- Flat Amount Discount Input -->\r\n          <div\r\n            class=\"discount-input-wrapper\"\r\n            :class=\"{ hidden: !flatDiscountEditable }\"\r\n          >\r\n            <input\r\n              v-model=\"flatDiscountAmount\"\r\n              type=\"text\"\r\n              class=\"discount-input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n            />\r\n            <button @click=\"confirmDiscount('amount')\" class=\"checkmark-button\">\r\n              <i class=\"fa-solid fa-check\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"cost-item\">\r\n          Btw <span class=\"price\">€{{ vat.toFixed(2) }}</span>\r\n        </div>\r\n        <div class=\"cost-item-total\">\r\n          Totaalprijs\r\n          <span class=\"total-price\">€{{ totalPrice.toFixed(2) }}</span>\r\n        </div>\r\n        <button class=\"checkout-button\" @click=\"openModal\">\r\n          Doorgaan naar afrekenen\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"showPopup\" class=\"popup-overlay\">\r\n      <div class=\"popup-message\">\r\n        <p>\r\n          {{ this.translations.invalidDiscount }}\r\n        </p>\r\n        <button @click=\"closePopup\">Sluiten</button>\r\n      </div>\r\n    </div>\r\n    <!-- Checkout Modal -->\r\n    <div v-if=\"showModal\" class=\"modal-overlay\" @click.self=\"closeModal\">\r\n      <div class=\"modal-content\">\r\n        <h2>Betalen</h2>\r\n\r\n        <div class=\"order-items-scrollable\">\r\n          <div\r\n            v-for=\"item in orderItems\"\r\n            :key=\"item.refcode\"\r\n            class=\"modal-order-item\"\r\n          >\r\n            <div class=\"item-info\">\r\n              <span class=\"product-name1\">{{ item.name }}</span>\r\n              <span class=\"product-quantity\">x{{ item.quantity }}</span>\r\n              <span class=\"product-pricee\"\r\n                >€{{ item.price_tax_incl.toFixed(2) }}</span\r\n              >\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <p class=\"total-price1\">Totaalprijs: €{{ totalPrice.toFixed(2) }}</p>\r\n\r\n        <div class=\"payment-methods\">\r\n          <h3>Selecteer Betaalmethode</h3>\r\n          <label>\r\n            <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"cash\" />\r\n            Contant\r\n          </label>\r\n          <label>\r\n            <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"card\" />\r\n            Kaart\r\n          </label>\r\n\r\n          <div v-if=\"selectedPaymentMethod === 'cash'\" class=\"cash-fields\">\r\n            <input\r\n              type=\"number\"\r\n              v-model.number=\"cashReceived\"\r\n              class=\"received-input\"\r\n              placeholder=\"Ontvangen bedrag\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              class=\"change-input\"\r\n              :value=\"calculateChange\"\r\n              placeholder=\"Wisselgeld\"\r\n              readonly\r\n            />\r\n          </div>\r\n\r\n          <p v-if=\"showPaymentWarning\" class=\"payment-warning\">\r\n            {{ this.translations.paymentWarning }}\r\n          </p>\r\n        </div>\r\n\r\n        <button @click=\"confirmCheckout\" class=\"confirm-checkout-modal\">\r\n          Bevestig Betaling\r\n        </button>\r\n        <button @click=\"closeModal\" class=\"close-modal\">Sluiten</button>\r\n      </div>\r\n    </div>\r\n    <!-- Confirmation Popup -->\r\n    <div v-if=\"showPaymentConfirmation\" class=\"confirmation-popup-overlay\">\r\n      <div class=\"confirmation-popup\">\r\n        <p>{{ this.translations.paymentConfirmation }}</p>\r\n        <button @click=\"handlePaymentConfirmation(true)\">Ja</button>\r\n        <button @click=\"handlePaymentConfirmation(false)\">Nee</button>\r\n      </div>\r\n    </div>\r\n    <!-- Receipt Popup -->\r\n    <div v-if=\"showReceiptPopup\" class=\"confirmation-popup-overlay\">\r\n      <div class=\"confirmation-popup\">\r\n        <p>{{ this.translations.receiptConfirmation }}</p>\r\n        <button @click=\"handleReceiptSelection(true)\">Ja</button>\r\n        <button @click=\"handleReceiptSelection(false)\">Nee</button>\r\n      </div>\r\n    </div>\r\n    <div id=\"receipt-content\" style=\"display: none\">\r\n      <h2>Receipt</h2>\r\n      <p>Total: €{{ totalPrice.toFixed(2) }}</p>\r\n      <div\r\n        v-for=\"item in orderItems\"\r\n        :key=\"item.refcode\"\r\n        class=\"modal-order-item\"\r\n      >\r\n        <div class=\"item-info\">\r\n          <span class=\"product-name1\">{{ item.name }}</span>\r\n          <span class=\"product-quantity\">x{{ item.quantity }}</span>\r\n          <span class=\"product-pricee\"\r\n            >€{{ item.price_tax_incl.toFixed(2) }}</span\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      previousItemCount: 0,\r\n      selectedProduct: null,\r\n      quantityMode: false,\r\n      quantityEditable: false,\r\n      editableQuantity: 0,\r\n      discountEditable: false,\r\n      flatDiscountEditable: false,\r\n      discountPercentage: 0,\r\n      flatDiscountAmount: 0,\r\n      previousDiscountPercentage: 0,\r\n      previousFlatDiscountAmount: 0,\r\n      newTotal: 0,\r\n      cashReceived: 0,\r\n      showPopup: false,\r\n      showModal: false,\r\n      selectedPaymentMethod: null,\r\n      showPaymentWarning: false,\r\n      showPaymentConfirmation: false,\r\n      showReceiptPopup: false,\r\n    };\r\n  },\r\n  props: {\r\n    orderItems: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    token: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  watch: {\r\n    orderItems: {\r\n      handler(newItems) {\r\n        // Scroll to the bottom only when an item is added\r\n        if (newItems.length > this.previousItemCount) {\r\n          this.scrollToBottom();\r\n        }\r\n        // Update previous item count for future comparisons\r\n        this.previousItemCount = newItems.length;\r\n      },\r\n      deep: true,\r\n    },\r\n    selectedPaymentMethod(newValue) {\r\n      if (newValue === \"cash\") {\r\n        this.showPaymentWarning = false; // Hide the warning when \"Contant\" is selected\r\n      }\r\n    },\r\n    showModal(newValue) {\r\n      // Emit modal-state-change based on showModal value\r\n      this.$emit(\"modal-state-change\", newValue);\r\n    },\r\n  },\r\n  computed: {\r\n    totalPrice() {\r\n      const discountedSubtotal = this.subtotal - this.discount;\r\n      return discountedSubtotal + this.vat;\r\n    },\r\n    subtotal() {\r\n      return this.orderItems.reduce(\r\n        (total, item) =>\r\n          total + (parseFloat(item.price_tax_excl) || 0) * item.quantity,\r\n        0\r\n      );\r\n    },\r\n    vat() {\r\n      const totalTaxable = this.orderItems.reduce(\r\n        (total, item) =>\r\n          total +\r\n          (parseFloat(item.price_tax_incl) - parseFloat(item.price_tax_excl)) *\r\n            item.quantity,\r\n        0\r\n      );\r\n      return totalTaxable; // Calculated VAT based on the taxable amount\r\n    },\r\n    discount() {\r\n      if (this.flatDiscountAmount > 0) {\r\n        // Use flat discount if set\r\n        return this.flatDiscountAmount;\r\n      } else if (this.discountPercentage > 0) {\r\n        const totalBeforeDiscount = this.subtotal + this.vat; // Calculate discount based on the total price (subtotal + vat)\r\n        return (this.discountPercentage / 100) * totalBeforeDiscount;\r\n      }\r\n      return 0; // No discount\r\n    },\r\n    calculateChange() {\r\n      return (this.cashReceived - this.totalPrice).toFixed(2);\r\n    },\r\n  },\r\n  methods: {\r\n    removeItem(refcode) {\r\n      this.$emit(\"remove-item\", refcode);\r\n    },\r\n    selectProduct(product) {\r\n      this.selectedProduct = product;\r\n      this.editableQuantity = product.quantity;\r\n    },\r\n    setQuantityMode() {\r\n      this.quantityEditable = true;\r\n    },\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const orderList = this.$refs.orderList;\r\n        if (orderList) {\r\n          orderList.scrollTop = orderList.scrollHeight;\r\n        }\r\n      });\r\n    },\r\n    handleKeyPress(key) {\r\n      if (this.selectedProduct && this.quantityEditable) {\r\n        // Handle quantity input\r\n        this.handleInput(\"editableQuantity\", key);\r\n      } else if (this.discountEditable) {\r\n        // Handle percentage discount input\r\n        this.handleInput(\"discountPercentage\", key);\r\n      } else if (this.flatDiscountEditable) {\r\n        // Handle flat discount input\r\n        this.handleInput(\"flatDiscountAmount\", key);\r\n      }\r\n    },\r\n\r\n    handleInput(field, key) {\r\n      const currentValue = this[field]?.toString() || \"0\";\r\n\r\n      if (!isNaN(key)) {\r\n        // Append numeric key\r\n        this[field] =\r\n          currentValue === \"0\" ? key.toString() : currentValue + key.toString();\r\n      } else if (key === \"delete\") {\r\n        // Remove the last character\r\n        this[field] = currentValue.slice(0, -1) || \"0\";\r\n      } else if (key === \".\") {\r\n        // Append a dot if not already present\r\n        if (!currentValue.includes(\".\")) {\r\n          this[field] = currentValue + \".\";\r\n        }\r\n      } else if (key === \"enter\") {\r\n        // Convert the input to a number when confirmed\r\n        this[field] = parseFloat(this[field]) || 0;\r\n      }\r\n    },\r\n    confirmQuantity() {\r\n      const newQuantity = parseInt(this.editableQuantity, 10);\r\n      if (isNaN(newQuantity) || this.editableQuantity === \"\") {\r\n        this.editableQuantity = this.selectedProduct.quantity; // Reset editable quantity to the original\r\n        this.quantityEditable = false;\r\n        return;\r\n      }\r\n\r\n      if (newQuantity === 0) {\r\n        this.$emit(\"remove-item\", this.selectedProduct.refcode);\r\n      } else {\r\n        this.$emit(\"set-quantity\", {\r\n          refcode: this.selectedProduct.refcode,\r\n          setQuantity: newQuantity,\r\n        });\r\n      }\r\n      this.quantityEditable = false;\r\n    },\r\n    handleOutsideClick(event) {\r\n      if (this.quantityEditable && !this.$el.contains(event.target)) {\r\n        this.confirmQuantity();\r\n      }\r\n    },\r\n    editDiscount() {\r\n      this.discountEditable = true;\r\n      this.flatDiscountEditable = false; // Ensure flat discount is not active\r\n    },\r\n    editFlatDiscount() {\r\n      this.flatDiscountEditable = true;\r\n      this.discountEditable = false; // Ensure percentage discount is not active\r\n    },\r\n    startEditingDiscount() {\r\n      this.previousDiscountPercentage = this.discountPercentage; // Save the current value\r\n      this.discountEditable = true; // Allow editing\r\n    },\r\n    confirmDiscount(type) {\r\n      if (type === \"percentage\") {\r\n        if (this.discountPercentage < 0 || this.discountPercentage > 100) {\r\n          // Display the popup for invalid percentage\r\n          this.showPopup = true;\r\n          return;\r\n        }\r\n        this.flatDiscountAmount = 0; // Clear flat discount\r\n        this.discountEditable = false;\r\n      } else if (type === \"amount\") {\r\n        if (\r\n          this.flatDiscountAmount < 0 ||\r\n          this.flatDiscountAmount > this.subtotal + this.vat\r\n        ) {\r\n          // Display the popup for invalid amount\r\n          this.showPopup = true;\r\n          return;\r\n        }\r\n\r\n        this.discountPercentage = 0; // Clear percentage discount\r\n        this.flatDiscountEditable = false;\r\n      }\r\n\r\n      // Ensure the values are numbers\r\n      this.discountPercentage = parseFloat(this.discountPercentage) || 0;\r\n      this.flatDiscountAmount = parseFloat(this.flatDiscountAmount) || 0;\r\n\r\n      // Optionally send data to the server\r\n      const discountPayload = {\r\n        discount_type: type,\r\n        value:\r\n          type === \"percentage\"\r\n            ? this.discountPercentage\r\n            : this.flatDiscountAmount,\r\n      };\r\n\r\n      fetch(`${this.apiBaseUrl}/orders/apply-discount`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${this.token}`,\r\n        },\r\n        body: JSON.stringify(discountPayload),\r\n      })\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(`Server error: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          if (data && data.new_total) {\r\n            this.newTotal = data.new_total;\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error applying discount:\", error);\r\n        });\r\n    },\r\n    // Method to close the popup\r\n    closePopup() {\r\n      this.showPopup = false; // Hide the popup\r\n      this.discountPercentage = this.previousDiscountPercentage || 0;\r\n      this.flatDiscountAmount = this.previousFlatDiscountAmount || 0;\r\n    },\r\n    openModal() {\r\n      this.showModal = true;\r\n    },\r\n    closeModal() {\r\n      this.showModal = false; // Hide modal\r\n      this.showPaymentWarning = false;\r\n      this.selectedPaymentMethod = null;\r\n    },\r\n    async confirmCheckout() {\r\n      if (!this.selectedPaymentMethod) {\r\n        this.showPaymentWarning = true;\r\n        return;\r\n      }\r\n\r\n      // Show confirmation popup after payment attempt\r\n      this.showPaymentConfirmation = true;\r\n      this.showPaymentWarning = false;\r\n    },\r\n    async createNewOrder() {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/new`,\r\n          {},\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        this.handleNewOrderResponse(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error creating new order:\", error);\r\n      }\r\n    },\r\n    async cancelOrder() {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/cancel`,\r\n          {},\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        this.handleCancelOrderResponse(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error canceling order:\", error);\r\n      }\r\n    },\r\n    async cancelPayment() {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/payment/cancel`,\r\n          {},\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        this.handleCancelOrderResponse(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error canceling payment:\", error);\r\n      }\r\n    },\r\n    async handlePaymentConfirmation(success) {\r\n      if (success) {\r\n        // Proceed with successful payment handling\r\n        console.log(\"Payment completed successfully.\");\r\n\r\n        // Determine payment method for the API\r\n        const amount = this.totalPrice.toFixed(2);\r\n        const paymentMethod =\r\n          this.selectedPaymentMethod === \"cash\"\r\n            ? \"CASH\"\r\n            : \"CREDIT_CARD_OFFLINE\";\r\n\r\n        try {\r\n          // Step 1: Call the checkout endpoint\r\n          const checkoutResponse = await axios.post(\r\n            `${this.apiBaseUrl}/checkout`,\r\n            {\r\n              amount: amount,\r\n              paymentMethod: paymentMethod,\r\n            },\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${this.token}`,\r\n              },\r\n            }\r\n          );\r\n\r\n          // Handle the checkout response\r\n          this.handleCheckoutResponse(checkoutResponse.data);\r\n\r\n          // Step 2: Depending on the selected payment method, call the respective payment endpoint\r\n          let paymentResponse;\r\n\r\n          if (this.selectedPaymentMethod === \"cash\") {\r\n            paymentResponse = await axios.post(\r\n              `${this.apiBaseUrl}/payment/cash`,\r\n              { amount, paymentMethod },\r\n              {\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  Authorization: `Bearer ${this.token}`,\r\n                },\r\n              }\r\n            );\r\n            // Handle successful cash payment response\r\n            this.handleCashPaymentResponse(paymentResponse.data);\r\n          } else if (this.selectedPaymentMethod === \"card\") {\r\n            paymentResponse = await axios.post(\r\n              `${this.apiBaseUrl}/payment/card`,\r\n              { amount, paymentMethod },\r\n              {\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  Authorization: `Bearer ${this.token}`,\r\n                },\r\n              }\r\n            );\r\n            // Handle successful card payment response\r\n            this.handleCardPaymentResponse(paymentResponse.data);\r\n          }\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 400) {\r\n            console.log(\"Checkout failed:\", error.response.data);\r\n          } else {\r\n            console.error(\"An unexpected error occurred:\", error);\r\n          }\r\n        }\r\n\r\n        // Reset states and close popups\r\n        this.showPaymentConfirmation = false;\r\n        this.selectedPaymentMethod = null;\r\n        this.showReceiptPopup = true;\r\n      } else {\r\n        // Close the confirmation popup without proceeding\r\n        this.showPaymentConfirmation = false;\r\n      }\r\n    },\r\n    async handleReceiptSelection(wantsReceipt) {\r\n      this.showReceiptPopup = false;\r\n\r\n      // If the user wants a receipt, print it first\r\n      if (wantsReceipt) {\r\n        this.showModal = false;\r\n        this.printReceipt(); // Print receipt first\r\n        console.log(\"User wants a receipt.\");\r\n      } else {\r\n        this.showModal = false;\r\n        console.log(\"User does not want a receipt.\");\r\n      }\r\n\r\n      // Wait for createNewOrder to complete\r\n      await this.createNewOrder();\r\n\r\n      // Reset the discount input to 0\r\n      this.discountPercentage = 0;\r\n      this.flatDiscountAmount = 0;\r\n\r\n      // Delay clearing the UI state for orderItems by 3 seconds\r\n      setTimeout(() => {\r\n        this.$emit(\"clear-order-items\");\r\n      }, 3000);\r\n    },\r\n    async printReceipt() {\r\n      try {\r\n        // Retrieve all orders with sorting by date (most recent first)\r\n        const ordersResponse = await axios.get(\r\n          `${this.apiBaseUrl}/orders?sort=date_desc&page=1&per_page=1`, // Assuming API supports sorting by date and pagination\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        // Ensure we get a valid order from the response\r\n        const ordersData = ordersResponse.data.data.list;\r\n        if (ordersData.length === 0) {\r\n          alert(\"No orders found.\");\r\n          return;\r\n        }\r\n\r\n        // Get the most recent order (the first in the sorted list)\r\n        const order = ordersData[0];\r\n\r\n        // Log the order ID of the most recent order\r\n        console.log(\"Order ID for printing:\", order.id);\r\n\r\n        // Call the print document endpoint directly with the most recent order ID\r\n        const printResponse = await axios.post(\r\n          `${this.apiBaseUrl}/orders/print-document`,\r\n          {\r\n            order_id: order.id, // Pass the most recent order ID here\r\n            print_type: \"RECEIPT\", // Print type is always 'RECEIPT'\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        this.handlePrintReceiptResponse(printResponse.data);\r\n      } catch (error) {\r\n        console.error(\"Error printing receipt:\", error);\r\n      }\r\n    },\r\n    handleCheckoutResponse(response) {\r\n      if (response.status === \"success\") {\r\n        // Proceed to payment confirmation step\r\n        this.showPaymentConfirmation = true;\r\n      } else if (response.status === \"fail\") {\r\n        // Handle failure scenarios, e.g., show an error message\r\n        console.error(\"Checkout failed:\", response.data.message);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    document.addEventListener(\"click\", this.handleOutsideClick);\r\n  },\r\n  beforeUnmount() {\r\n    document.removeEventListener(\"click\", this.handleOutsideClick);\r\n  },\r\n};\r\n</script>\r\n",{"ruleId":null,"fatal":true,"severity":2,"message":"75"},{"ruleId":null,"fatal":true,"severity":2,"message":"76"},{"ruleId":null,"fatal":true,"severity":2,"message":"77"},{"ruleId":null,"fatal":true,"severity":2,"message":"78"},{"ruleId":null,"fatal":true,"severity":2,"message":"79"},{"ruleId":null,"fatal":true,"severity":2,"message":"80"},{"ruleId":null,"fatal":true,"severity":2,"message":"81"},{"ruleId":null,"fatal":true,"severity":2,"message":"82"},{"ruleId":null,"fatal":true,"severity":2,"message":"83"},{"ruleId":null,"fatal":true,"severity":2,"message":"84"},{"ruleId":null,"fatal":true,"severity":2,"message":"85"},{"ruleId":null,"fatal":true,"severity":2,"message":"86"},"Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\main.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\App.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\router.js. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderDetails.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderOverview.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\ClientOverview.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\LoginComponent.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\HeaderComponent.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\ErrorPopup.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\CashRegister.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\SidebarComponent.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files.","Parsing error: No Babel config file detected for C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderSummary.vue. Either disable config file checking with requireConfigFile: false, or configure Babel so that it can find the config files."]