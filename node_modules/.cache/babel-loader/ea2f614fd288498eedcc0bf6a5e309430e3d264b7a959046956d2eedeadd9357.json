{"ast":null,"code":"import LoginComponent from \"./components/LoginComponent.vue\";\nimport CashRegister from \"./components/CashRegister.vue\";\nimport HeaderComponent from \"./components/HeaderComponent.vue\";\nimport SidebarComponent from \"./components/SidebarComponent.vue\";\nimport ErrorPopup from \"./components/ErrorPopup.vue\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    LoginComponent,\n    CashRegister,\n    HeaderComponent,\n    SidebarComponent,\n    ErrorPopup\n  },\n  watch: {\n    token(newToken) {\n      if (newToken) {\n        // If the user logs in, start tracking inactivity\n        this.setupInactivityListener();\n      } else {\n        // If the user logs out, stop tracking inactivity\n        this.cleanupInactivityListener();\n      }\n    }\n  },\n  props: {\n    apiBaseUrl: {\n      type: String,\n      required: true\n    },\n    translations: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      orderItems: [],\n      token: null,\n      user: null,\n      disableFocus: false,\n      inactivityTimeout: null,\n      tokenExpirationTime: null,\n      // Timestamp when the token will expire\n      tokenExchangeTimeout: null\n    };\n  },\n  methods: {\n    async fetchCurrentOrder() {\n      try {\n        const response = await axios.get(`${this.apiBaseUrl}/orders/current`, {\n          headers: {\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n\n        // Extract lines safely\n        const cart = response.data?.data?.cart;\n        if (cart && Array.isArray(cart.lines)) {\n          this.orderItems = cart.lines.map(line => ({\n            product_id: line.product_id,\n            refcode: line.reference,\n            name: line.name,\n            price_tax_incl: line.price_tax_incl,\n            price_tax_excl: line.price_tax_excl,\n            quantity: line.quantity,\n            image_url: line.image_url\n          }));\n        } else {\n          console.warn(\"No cart or lines data available in the response.\");\n          this.orderItems = [];\n        }\n      } catch (error) {\n        console.error(\"Error fetching current order:\", error);\n      }\n    },\n    async addProductToOrder(product) {\n      // Find if the product is already in the order\n      let existingItem = this.orderItems.find(item => item.refcode === product.refcode);\n\n      // Check local stock before making the API call\n      if (existingItem && existingItem.quantity + 1 > product.stock) {\n        alert(`Cannot add more than available stock of ${product.stock}`);\n        return; // Exit without updating if it exceeds stock\n      } else if (!existingItem && product.stock < 1) {\n        alert(this.translations.outOfStock);\n        return;\n      }\n\n      // Make the API request to add the product to the order\n      try {\n        const response = await axios.post(`${this.apiBaseUrl}/orders/add-product-to-order`, {\n          refcode: product.refcode,\n          quantity: 1\n        }, {\n          headers: {\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n\n        // Check response for OUT_OF_STOCK error\n        if (response.data.status === \"fail\" && response.data.data.code === \"OUT_OF_STOCK\") {\n          const quantityAvailable = response.data.data.quantityAvailable;\n          alert(`Only ${quantityAvailable} items are available in stock. Please adjust your quantity.`);\n\n          // Adjust existing item quantity in UI to match available stock\n          if (existingItem) {\n            existingItem.quantity = quantityAvailable;\n          }\n          return; // Exit without adding further items\n        }\n\n        // If the response is successful, update orderItems in the UI\n        if (existingItem) {\n          existingItem.quantity += 1;\n        } else {\n          this.orderItems.push({\n            ...product,\n            quantity: 1\n          });\n        }\n        console.log(\"Updated order summary:\", response.data);\n      } catch (error) {\n        if (error.response && error.response.status === 422) {\n          this.$refs.errorPopup.showPopup(this.translations.outOfStock);\n        } else {\n          console.error(\"Error adding product to order:\", error);\n        }\n      }\n    },\n    async removeProductFromOrder(refcode) {\n      const previousItems = [...this.orderItems];\n      this.orderItems = this.orderItems.filter(item => item.refcode !== refcode);\n      try {\n        const response = await axios.post(`${this.apiBaseUrl}/orders/delete-product-from-order`, {\n          refcode: refcode\n        }, {\n          headers: {\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n        if (response.data.status === \"success\") {\n          console.log(\"Item successfully deleted from the order.\");\n        } else if (response.data.status === \"fail\") {\n          this.handleError(response.data.data);\n          this.orderItems = previousItems; // Restore previous items\n        }\n      } catch (error) {\n        console.error(\"Error removing product from order:\", error);\n        this.orderItems = previousItems; // Restore previous items\n      }\n    },\n    async updateItemQuantity({\n      refcode,\n      quantity\n    }) {\n      const itemIndex = this.orderItems.findIndex(item => item.refcode === refcode);\n      if (itemIndex !== -1) {\n        const item = this.orderItems[itemIndex];\n        const newQuantity = item.quantity + quantity;\n\n        // If the quantity is zero, call removeProductFromOrder and exit\n        if (newQuantity <= 0) {\n          this.removeProductFromOrder(refcode); // Call remove method\n          return; // Exit the function without further processing\n        }\n\n        // Check stock before updating\n        if (newQuantity > item.stock) {\n          alert(`Cannot update quantity. Available stock is ${item.stock}.`);\n          return; // Exit without updating if it exceeds stock\n        }\n\n        // Make the API call to update quantity\n        try {\n          const response = await axios.post(`${this.apiBaseUrl}/orders/change-quantity`, {\n            refcode: refcode,\n            quantity: newQuantity\n          }, {\n            headers: {\n              Authorization: `Bearer ${this.token}`\n            }\n          });\n\n          // Check for OUT_OF_STOCK error in response\n          if (response.data.status === \"fail\" && response.data.data.code === \"OUT_OF_STOCK\") {\n            const quantityAvailable = response.data.data.quantityAvailable;\n            alert(`Only ${quantityAvailable} items are available in stock. Please adjust your quantity.`);\n\n            // Adjust the item quantity if it exceeds available stock\n            item.quantity = quantityAvailable;\n            return; // Exit without adding further items\n          }\n\n          // If the response is successful, update the orderItems in the UI\n          item.quantity = newQuantity;\n          console.log(\"Updated order summary:\", response.data);\n        } catch (error) {\n          if (error.response && error.response.status === 422) {\n            this.$refs.errorPopup.showPopup(this.translations.outOfStock);\n          } else {\n            console.error(\"Error updating product quantity:\", error);\n          }\n        }\n      } else {\n        console.error(`Item with refcode ${refcode} not found in the order.`);\n      }\n    },\n    async setItemQuantity({\n      refcode,\n      setQuantity\n    }) {\n      const itemIndex = this.orderItems.findIndex(item => item.refcode === refcode);\n      if (itemIndex !== -1) {\n        const item = this.orderItems[itemIndex];\n\n        // Check if the requested quantity exceeds stock\n        if (setQuantity > item.stock) {\n          this.$refs.errorPopup.showPopup(`Requested quantity of ${setQuantity} exceeds available stock of ${item.stock}.`);\n          return; // Prevent further processing if quantity exceeds stock\n        }\n\n        // API call to update quantity on the server\n        try {\n          const response = await axios.post(`${this.apiBaseUrl}/orders/change-quantity`, {\n            refcode: refcode,\n            quantity: setQuantity\n          }, {\n            headers: {\n              Authorization: `Bearer ${this.token}`\n            }\n          });\n\n          // Handle stock errors from the API response\n          if (response.data.status === \"fail\" && response.data.data.code === \"OUT_OF_STOCK\") {\n            const quantityAvailable = response.data.data.quantityAvailable;\n            this.$refs.errorPopup.showPopup(`Only ${quantityAvailable} items are available. Adjusting quantity to available stock.`);\n            item.quantity = quantityAvailable; // Set quantity to available stock\n            return; // Exit if out of stock\n          }\n\n          // If the response is successful, update the orderItems in the UI\n          item.quantity = setQuantity;\n          console.log(\"Quantity successfully updated:\", response.data);\n        } catch (error) {\n          if (error.response && error.response.status === 422) {\n            this.$refs.errorPopup.showPopup(this.translations.outOfStock);\n          } else {\n            console.error(\"Error updating quantity:\", error);\n          }\n        }\n      } else {\n        console.error(`Item with refcode ${refcode} not found in the order.`);\n      }\n    },\n    clearOrderItems() {\n      this.orderItems = [];\n    },\n    updateModalState(state) {\n      this.disableFocus = state; // Disable focus when modal is shown\n    },\n    updateFocusState(isFocused) {\n      this.disableFocus = isFocused;\n    },\n    logout() {\n      // Remove the token and workstation from localStorage\n      this.clearTokenData();\n    },\n    resetInactivityTimer() {\n      // Clear the existing timeout\n      if (this.inactivityTimeout) {\n        clearTimeout(this.inactivityTimeout);\n      }\n\n      // Set a new timeout for 15 minutes\n      this.inactivityTimeout = setTimeout(() => {\n        this.logout();\n      }, 15 * 60 * 1000); // 15 minutes in milliseconds\n    },\n    setupInactivityListener() {\n      // Events that reset the inactivity timer\n      const events = [\"mousemove\", \"keydown\", \"click\", \"scroll\"];\n\n      // Add listeners to reset the timer on user interaction\n      events.forEach(event => {\n        window.addEventListener(event, this.resetInactivityTimer);\n      });\n\n      // Start the initial inactivity timer\n      this.resetInactivityTimer();\n    },\n    cleanupInactivityListener() {\n      // Clear the timeout\n      if (this.inactivityTimeout) {\n        clearTimeout(this.inactivityTimeout);\n      }\n\n      // Remove event listeners\n      const events = [\"mousemove\", \"keydown\", \"click\", \"scroll\"];\n      events.forEach(event => {\n        window.removeEventListener(event, this.resetInactivityTimer);\n      });\n    },\n    async setToken(token, isExchange = false) {\n      try {\n        const response = await axios.get(`${this.apiBaseUrl}/token`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        if (response.data.status === \"success\") {\n          const {\n            firstname,\n            lastname,\n            token: tokenData\n          } = response.data.data;\n          const {\n            expiresIn\n          } = tokenData; // Extract expiresIn from the token object\n\n          this.token = token;\n          this.user = {\n            firstName: firstname,\n            lastName: lastname\n          };\n          console.log(\"ExpiresIn received:\", expiresIn);\n          console.log(\"Full API response:\", response.data);\n\n          // Calculate and store the token expiration time\n          this.tokenExpirationTime = Date.now() + expiresIn * 1000;\n          localStorage.setItem(\"authToken\", token);\n          localStorage.setItem(\"userFirstName\", firstname);\n          localStorage.setItem(\"userLastName\", lastname);\n          localStorage.setItem(\"tokenExpirationTime\", this.tokenExpirationTime);\n\n          // Schedule token exchange if it's not during an exchange call\n          if (!isExchange) {\n            this.scheduleTokenExchange(expiresIn);\n          }\n          return true;\n        }\n      } catch (error) {\n        console.error(\"Error validating token:\", error);\n      }\n      this.clearTokenData();\n      return false;\n    },\n    scheduleTokenExchange(expiresIn) {\n      if (!expiresIn || isNaN(expiresIn)) {\n        console.error(\"Invalid expiresIn value. Cannot schedule token exchange.\");\n        return;\n      }\n      const exchangeInMs = (expiresIn - 300) * 1000;\n      if (exchangeInMs <= 0) {\n        console.warn(\"Token has less than 60 seconds. Exchanging immediately.\");\n        this.exchangeToken();\n        return;\n      }\n      if (this.tokenExchangeTimeout) {\n        clearTimeout(this.tokenExchangeTimeout);\n      }\n      this.tokenExchangeTimeout = setTimeout(() => {\n        this.exchangeToken();\n      }, exchangeInMs);\n      console.log(`Token exchange scheduled in ${(exchangeInMs / 1000).toFixed(1)} seconds.`);\n    },\n    async exchangeToken() {\n      try {\n        const response = await axios.post(`${this.apiBaseUrl}/token/exchange`, {}, {\n          headers: {\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n        if (response.status === 200) {\n          const newToken = response.data.data.token.value;\n          console.log(\"Token exchanged successfully.\");\n          await this.setToken(newToken, true); // Pass true to avoid rescheduling\n        } else {\n          console.warn(\"Token exchange failed. Logging out.\");\n          this.logout();\n        }\n      } catch (error) {\n        console.error(\"Error exchanging token:\", error);\n        this.logout();\n      }\n    },\n    clearTokenData() {\n      this.token = null;\n      this.user = null;\n      this.tokenExpirationTime = null;\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"userFirstName\");\n      localStorage.removeItem(\"userLastName\");\n      localStorage.removeItem(\"tokenExpirationTime\");\n      if (this.tokenExchangeTimeout) clearTimeout(this.tokenExchangeTimeout);\n    },\n    handleError(errorData) {\n      switch (errorData.code) {\n        case \"NOT_FOUND\":\n          console.error(\"Product not found:\", errorData.message);\n          break;\n        case \"BAD_REQUEST\":\n          console.error(\"Bad request:\", errorData.message);\n          break;\n        case \"OUT_OF_STOCK\":\n          console.error(\"Out of stock:\", errorData.message);\n          alert(\"This product is currently out of stock.\");\n          break;\n        case \"MINIMAL_QUANTITY_REQUIRED\":\n          console.error(\"Minimum quantity required:\", errorData.message);\n          break;\n        default:\n          console.error(\"An unknown error occurred.\");\n      }\n    }\n  },\n  mounted() {\n    const storedToken = localStorage.getItem(\"authToken\");\n    const storedExpirationTime = parseInt(localStorage.getItem(\"tokenExpirationTime\"), 10);\n    if (storedToken && storedExpirationTime > Date.now()) {\n      const expiresIn = (storedExpirationTime - Date.now()) / 1000;\n      this.setToken(storedToken).then(isValid => {\n        if (isValid) {\n          this.scheduleTokenExchange(expiresIn);\n          this.fetchCurrentOrder(); // Fetch order only if token is valid\n        } else {\n          console.warn(\"Stored token is invalid. Logging out.\");\n          this.logout();\n        }\n      });\n    } else {\n      console.warn(\"No valid token found. Redirecting to login.\");\n      this.logout();\n    }\n    if (this.token) {\n      this.fetchCurrentOrder();\n      this.setupInactivityListener();\n    }\n  },\n  beforeUnmount() {\n    if (this.tokenExchangeTimeout) {\n      clearTimeout(this.tokenExchangeTimeout); // Clean up the timer\n    }\n    this.cleanupInactivityListener();\n  }\n};","map":{"version":3,"names":["LoginComponent","CashRegister","HeaderComponent","SidebarComponent","ErrorPopup","axios","components","watch","token","newToken","setupInactivityListener","cleanupInactivityListener","props","apiBaseUrl","type","String","required","translations","Object","data","orderItems","user","disableFocus","inactivityTimeout","tokenExpirationTime","tokenExchangeTimeout","methods","fetchCurrentOrder","response","get","headers","Authorization","cart","Array","isArray","lines","map","line","product_id","refcode","reference","name","price_tax_incl","price_tax_excl","quantity","image_url","console","warn","error","addProductToOrder","product","existingItem","find","item","stock","alert","outOfStock","post","status","code","quantityAvailable","push","log","$refs","errorPopup","showPopup","removeProductFromOrder","previousItems","filter","handleError","updateItemQuantity","itemIndex","findIndex","newQuantity","setItemQuantity","setQuantity","clearOrderItems","updateModalState","state","updateFocusState","isFocused","logout","clearTokenData","resetInactivityTimer","clearTimeout","setTimeout","events","forEach","event","window","addEventListener","removeEventListener","setToken","isExchange","firstname","lastname","tokenData","expiresIn","firstName","lastName","Date","now","localStorage","setItem","scheduleTokenExchange","isNaN","exchangeInMs","exchangeToken","toFixed","value","removeItem","errorData","message","mounted","storedToken","getItem","storedExpirationTime","parseInt","then","isValid","beforeUnmount"],"sources":["C:\\wamp64\\www\\tbpos\\src\\front\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <LoginComponent\r\n      v-if=\"!token\"\r\n      :api-base-url=\"apiBaseUrl\"\r\n      :translations=\"translations\"\r\n      @login-success=\"setToken\"\r\n    />\r\n    <div v-else>\r\n      <HeaderComponent\r\n        :api-base-url=\"apiBaseUrl\"\r\n        :translations=\"translations\"\r\n        :disable-focus=\"disableFocus\"\r\n        :token=\"token\"\r\n        :user=\"user\"\r\n        @product-scanned=\"addProductToOrder\"\r\n        @logout=\"logout\"\r\n      />\r\n      <div class=\"container-fluid main-content\">\r\n        <div class=\"row\">\r\n          <div class=\"col-2\">\r\n            <SidebarComponent />\r\n          </div>\r\n          <div class=\"col-5\" style=\"padding: 20px\">\r\n            <router-view\r\n              :api-base-url=\"apiBaseUrl\"\r\n              :orderItems=\"orderItems\"\r\n              :translations=\"translations\"\r\n              :token=\"token\"\r\n              @focus-state-change=\"updateFocusState\"\r\n            />\r\n          </div>\r\n          <div class=\"col-5\">\r\n            <CashRegister\r\n              :api-base-url=\"apiBaseUrl\"\r\n              :orderItems=\"orderItems\"\r\n              :translations=\"translations\"\r\n              :token=\"token\"\r\n              @remove-item=\"removeProductFromOrder\"\r\n              @update-quantity=\"updateItemQuantity\"\r\n              @set-quantity=\"setItemQuantity\"\r\n              @clear-order-items=\"clearOrderItems\"\r\n              @modal-state-change=\"updateModalState\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ErrorPopup ref=\"errorPopup\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport LoginComponent from \"./components/LoginComponent.vue\";\r\nimport CashRegister from \"./components/CashRegister.vue\";\r\nimport HeaderComponent from \"./components/HeaderComponent.vue\";\r\nimport SidebarComponent from \"./components/SidebarComponent.vue\";\r\nimport ErrorPopup from \"./components/ErrorPopup.vue\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  components: {\r\n    LoginComponent,\r\n    CashRegister,\r\n    HeaderComponent,\r\n    SidebarComponent,\r\n    ErrorPopup,\r\n  },\r\n  watch: {\r\n    token(newToken) {\r\n      if (newToken) {\r\n        // If the user logs in, start tracking inactivity\r\n        this.setupInactivityListener();\r\n      } else {\r\n        // If the user logs out, stop tracking inactivity\r\n        this.cleanupInactivityListener();\r\n      }\r\n    },\r\n  },\r\n  props: {\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      orderItems: [],\r\n      token: null,\r\n      user: null,\r\n      disableFocus: false,\r\n      inactivityTimeout: null,\r\n      tokenExpirationTime: null, // Timestamp when the token will expire\r\n      tokenExchangeTimeout: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchCurrentOrder() {\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/orders/current`, {\r\n          headers: { Authorization: `Bearer ${this.token}` },\r\n        });\r\n\r\n        // Extract lines safely\r\n        const cart = response.data?.data?.cart;\r\n        if (cart && Array.isArray(cart.lines)) {\r\n          this.orderItems = cart.lines.map((line) => ({\r\n            product_id: line.product_id,\r\n            refcode: line.reference,\r\n            name: line.name,\r\n            price_tax_incl: line.price_tax_incl,\r\n            price_tax_excl: line.price_tax_excl,\r\n            quantity: line.quantity,\r\n            image_url: line.image_url,\r\n          }));\r\n        } else {\r\n          console.warn(\"No cart or lines data available in the response.\");\r\n          this.orderItems = [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching current order:\", error);\r\n      }\r\n    },\r\n    async addProductToOrder(product) {\r\n      // Find if the product is already in the order\r\n      let existingItem = this.orderItems.find(\r\n        (item) => item.refcode === product.refcode\r\n      );\r\n\r\n      // Check local stock before making the API call\r\n      if (existingItem && existingItem.quantity + 1 > product.stock) {\r\n        alert(`Cannot add more than available stock of ${product.stock}`);\r\n        return; // Exit without updating if it exceeds stock\r\n      } else if (!existingItem && product.stock < 1) {\r\n        alert(this.translations.outOfStock);\r\n        return;\r\n      }\r\n\r\n      // Make the API request to add the product to the order\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/add-product-to-order`,\r\n          { refcode: product.refcode, quantity: 1 },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        // Check response for OUT_OF_STOCK error\r\n        if (\r\n          response.data.status === \"fail\" &&\r\n          response.data.data.code === \"OUT_OF_STOCK\"\r\n        ) {\r\n          const quantityAvailable = response.data.data.quantityAvailable;\r\n          alert(\r\n            `Only ${quantityAvailable} items are available in stock. Please adjust your quantity.`\r\n          );\r\n\r\n          // Adjust existing item quantity in UI to match available stock\r\n          if (existingItem) {\r\n            existingItem.quantity = quantityAvailable;\r\n          }\r\n          return; // Exit without adding further items\r\n        }\r\n\r\n        // If the response is successful, update orderItems in the UI\r\n        if (existingItem) {\r\n          existingItem.quantity += 1;\r\n        } else {\r\n          this.orderItems.push({\r\n            ...product,\r\n            quantity: 1,\r\n          });\r\n        }\r\n\r\n        console.log(\"Updated order summary:\", response.data);\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 422) {\r\n          this.$refs.errorPopup.showPopup(this.translations.outOfStock);\r\n        } else {\r\n          console.error(\"Error adding product to order:\", error);\r\n        }\r\n      }\r\n    },\r\n    async removeProductFromOrder(refcode) {\r\n      const previousItems = [...this.orderItems];\r\n      this.orderItems = this.orderItems.filter(\r\n        (item) => item.refcode !== refcode\r\n      );\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/delete-product-from-order`,\r\n          {\r\n            refcode: refcode,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (response.data.status === \"success\") {\r\n          console.log(\"Item successfully deleted from the order.\");\r\n        } else if (response.data.status === \"fail\") {\r\n          this.handleError(response.data.data);\r\n          this.orderItems = previousItems; // Restore previous items\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error removing product from order:\", error);\r\n        this.orderItems = previousItems; // Restore previous items\r\n      }\r\n    },\r\n    async updateItemQuantity({ refcode, quantity }) {\r\n      const itemIndex = this.orderItems.findIndex(\r\n        (item) => item.refcode === refcode\r\n      );\r\n\r\n      if (itemIndex !== -1) {\r\n        const item = this.orderItems[itemIndex];\r\n        const newQuantity = item.quantity + quantity;\r\n\r\n        // If the quantity is zero, call removeProductFromOrder and exit\r\n        if (newQuantity <= 0) {\r\n          this.removeProductFromOrder(refcode); // Call remove method\r\n          return; // Exit the function without further processing\r\n        }\r\n\r\n        // Check stock before updating\r\n        if (newQuantity > item.stock) {\r\n          alert(`Cannot update quantity. Available stock is ${item.stock}.`);\r\n          return; // Exit without updating if it exceeds stock\r\n        }\r\n\r\n        // Make the API call to update quantity\r\n        try {\r\n          const response = await axios.post(\r\n            `${this.apiBaseUrl}/orders/change-quantity`,\r\n            { refcode: refcode, quantity: newQuantity },\r\n            {\r\n              headers: { Authorization: `Bearer ${this.token}` },\r\n            }\r\n          );\r\n\r\n          // Check for OUT_OF_STOCK error in response\r\n          if (\r\n            response.data.status === \"fail\" &&\r\n            response.data.data.code === \"OUT_OF_STOCK\"\r\n          ) {\r\n            const quantityAvailable = response.data.data.quantityAvailable;\r\n            alert(\r\n              `Only ${quantityAvailable} items are available in stock. Please adjust your quantity.`\r\n            );\r\n\r\n            // Adjust the item quantity if it exceeds available stock\r\n            item.quantity = quantityAvailable;\r\n            return; // Exit without adding further items\r\n          }\r\n\r\n          // If the response is successful, update the orderItems in the UI\r\n          item.quantity = newQuantity;\r\n\r\n          console.log(\"Updated order summary:\", response.data);\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 422) {\r\n            this.$refs.errorPopup.showPopup(this.translations.outOfStock);\r\n          } else {\r\n            console.error(\"Error updating product quantity:\", error);\r\n          }\r\n        }\r\n      } else {\r\n        console.error(`Item with refcode ${refcode} not found in the order.`);\r\n      }\r\n    },\r\n    async setItemQuantity({ refcode, setQuantity }) {\r\n      const itemIndex = this.orderItems.findIndex(\r\n        (item) => item.refcode === refcode\r\n      );\r\n\r\n      if (itemIndex !== -1) {\r\n        const item = this.orderItems[itemIndex];\r\n\r\n        // Check if the requested quantity exceeds stock\r\n        if (setQuantity > item.stock) {\r\n          this.$refs.errorPopup.showPopup(\r\n            `Requested quantity of ${setQuantity} exceeds available stock of ${item.stock}.`\r\n          );\r\n          return; // Prevent further processing if quantity exceeds stock\r\n        }\r\n\r\n        // API call to update quantity on the server\r\n        try {\r\n          const response = await axios.post(\r\n            `${this.apiBaseUrl}/orders/change-quantity`,\r\n            { refcode: refcode, quantity: setQuantity },\r\n            {\r\n              headers: { Authorization: `Bearer ${this.token}` },\r\n            }\r\n          );\r\n\r\n          // Handle stock errors from the API response\r\n          if (\r\n            response.data.status === \"fail\" &&\r\n            response.data.data.code === \"OUT_OF_STOCK\"\r\n          ) {\r\n            const quantityAvailable = response.data.data.quantityAvailable;\r\n            this.$refs.errorPopup.showPopup(\r\n              `Only ${quantityAvailable} items are available. Adjusting quantity to available stock.`\r\n            );\r\n            item.quantity = quantityAvailable; // Set quantity to available stock\r\n            return; // Exit if out of stock\r\n          }\r\n\r\n          // If the response is successful, update the orderItems in the UI\r\n          item.quantity = setQuantity;\r\n          console.log(\"Quantity successfully updated:\", response.data);\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 422) {\r\n            this.$refs.errorPopup.showPopup(this.translations.outOfStock);\r\n          } else {\r\n            console.error(\"Error updating quantity:\", error);\r\n          }\r\n        }\r\n      } else {\r\n        console.error(`Item with refcode ${refcode} not found in the order.`);\r\n      }\r\n    },\r\n    clearOrderItems() {\r\n      this.orderItems = [];\r\n    },\r\n    updateModalState(state) {\r\n      this.disableFocus = state; // Disable focus when modal is shown\r\n    },\r\n    updateFocusState(isFocused) {\r\n      this.disableFocus = isFocused;\r\n    },\r\n    logout() {\r\n      // Remove the token and workstation from localStorage\r\n      this.clearTokenData();\r\n    },\r\n    resetInactivityTimer() {\r\n      // Clear the existing timeout\r\n      if (this.inactivityTimeout) {\r\n        clearTimeout(this.inactivityTimeout);\r\n      }\r\n\r\n      // Set a new timeout for 15 minutes\r\n      this.inactivityTimeout = setTimeout(() => {\r\n        this.logout();\r\n      }, 15 * 60 * 1000); // 15 minutes in milliseconds\r\n    },\r\n    setupInactivityListener() {\r\n      // Events that reset the inactivity timer\r\n      const events = [\"mousemove\", \"keydown\", \"click\", \"scroll\"];\r\n\r\n      // Add listeners to reset the timer on user interaction\r\n      events.forEach((event) => {\r\n        window.addEventListener(event, this.resetInactivityTimer);\r\n      });\r\n\r\n      // Start the initial inactivity timer\r\n      this.resetInactivityTimer();\r\n    },\r\n    cleanupInactivityListener() {\r\n      // Clear the timeout\r\n      if (this.inactivityTimeout) {\r\n        clearTimeout(this.inactivityTimeout);\r\n      }\r\n\r\n      // Remove event listeners\r\n      const events = [\"mousemove\", \"keydown\", \"click\", \"scroll\"];\r\n      events.forEach((event) => {\r\n        window.removeEventListener(event, this.resetInactivityTimer);\r\n      });\r\n    },\r\n    async setToken(token, isExchange = false) {\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/token`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n\r\n        if (response.data.status === \"success\") {\r\n          const { firstname, lastname, token: tokenData } = response.data.data;\r\n          const { expiresIn } = tokenData; // Extract expiresIn from the token object\r\n\r\n          this.token = token;\r\n          this.user = { firstName: firstname, lastName: lastname };\r\n\r\n          console.log(\"ExpiresIn received:\", expiresIn);\r\n          console.log(\"Full API response:\", response.data);\r\n\r\n          // Calculate and store the token expiration time\r\n          this.tokenExpirationTime = Date.now() + expiresIn * 1000;\r\n          localStorage.setItem(\"authToken\", token);\r\n          localStorage.setItem(\"userFirstName\", firstname);\r\n          localStorage.setItem(\"userLastName\", lastname);\r\n          localStorage.setItem(\"tokenExpirationTime\", this.tokenExpirationTime);\r\n\r\n          // Schedule token exchange if it's not during an exchange call\r\n          if (!isExchange) {\r\n            this.scheduleTokenExchange(expiresIn);\r\n          }\r\n          return true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error validating token:\", error);\r\n      }\r\n\r\n      this.clearTokenData();\r\n      return false;\r\n    },\r\n    scheduleTokenExchange(expiresIn) {\r\n      if (!expiresIn || isNaN(expiresIn)) {\r\n        console.error(\r\n          \"Invalid expiresIn value. Cannot schedule token exchange.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      const exchangeInMs = (expiresIn - 300) * 1000;\r\n\r\n      if (exchangeInMs <= 0) {\r\n        console.warn(\"Token has less than 60 seconds. Exchanging immediately.\");\r\n        this.exchangeToken();\r\n        return;\r\n      }\r\n\r\n      if (this.tokenExchangeTimeout) {\r\n        clearTimeout(this.tokenExchangeTimeout);\r\n      }\r\n\r\n      this.tokenExchangeTimeout = setTimeout(() => {\r\n        this.exchangeToken();\r\n      }, exchangeInMs);\r\n\r\n      console.log(\r\n        `Token exchange scheduled in ${(exchangeInMs / 1000).toFixed(\r\n          1\r\n        )} seconds.`\r\n      );\r\n    },\r\n    async exchangeToken() {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/token/exchange`,\r\n          {},\r\n          {\r\n            headers: { Authorization: `Bearer ${this.token}` },\r\n          }\r\n        );\r\n\r\n        if (response.status === 200) {\r\n          const newToken = response.data.data.token.value;\r\n          console.log(\"Token exchanged successfully.\");\r\n          await this.setToken(newToken, true); // Pass true to avoid rescheduling\r\n        } else {\r\n          console.warn(\"Token exchange failed. Logging out.\");\r\n          this.logout();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error exchanging token:\", error);\r\n        this.logout();\r\n      }\r\n    },\r\n    clearTokenData() {\r\n      this.token = null;\r\n      this.user = null;\r\n      this.tokenExpirationTime = null;\r\n\r\n      localStorage.removeItem(\"authToken\");\r\n      localStorage.removeItem(\"userFirstName\");\r\n      localStorage.removeItem(\"userLastName\");\r\n      localStorage.removeItem(\"tokenExpirationTime\");\r\n\r\n      if (this.tokenExchangeTimeout) clearTimeout(this.tokenExchangeTimeout);\r\n    },\r\n    handleError(errorData) {\r\n      switch (errorData.code) {\r\n        case \"NOT_FOUND\":\r\n          console.error(\"Product not found:\", errorData.message);\r\n          break;\r\n        case \"BAD_REQUEST\":\r\n          console.error(\"Bad request:\", errorData.message);\r\n          break;\r\n        case \"OUT_OF_STOCK\":\r\n          console.error(\"Out of stock:\", errorData.message);\r\n          alert(\"This product is currently out of stock.\");\r\n          break;\r\n        case \"MINIMAL_QUANTITY_REQUIRED\":\r\n          console.error(\"Minimum quantity required:\", errorData.message);\r\n          break;\r\n        default:\r\n          console.error(\"An unknown error occurred.\");\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    const storedToken = localStorage.getItem(\"authToken\");\r\n    const storedExpirationTime = parseInt(\r\n      localStorage.getItem(\"tokenExpirationTime\"),\r\n      10\r\n    );\r\n\r\n    if (storedToken && storedExpirationTime > Date.now()) {\r\n      const expiresIn = (storedExpirationTime - Date.now()) / 1000;\r\n\r\n      this.setToken(storedToken).then((isValid) => {\r\n        if (isValid) {\r\n          this.scheduleTokenExchange(expiresIn);\r\n          this.fetchCurrentOrder(); // Fetch order only if token is valid\r\n        } else {\r\n          console.warn(\"Stored token is invalid. Logging out.\");\r\n          this.logout();\r\n        }\r\n      });\r\n    } else {\r\n      console.warn(\"No valid token found. Redirecting to login.\");\r\n      this.logout();\r\n    }\r\n    if (this.token) {\r\n      this.fetchCurrentOrder();\r\n      this.setupInactivityListener();\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    if (this.tokenExchangeTimeout) {\r\n      clearTimeout(this.tokenExchangeTimeout); // Clean up the timer\r\n    }\r\n    this.cleanupInactivityListener();\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}