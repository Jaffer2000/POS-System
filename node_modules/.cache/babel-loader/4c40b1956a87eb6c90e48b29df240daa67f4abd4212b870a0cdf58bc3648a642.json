{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  name: \"OrderOverview\",\n  props: {\n    apiBaseUrl: {\n      type: String,\n      required: true\n    },\n    translations: {\n      type: Object,\n      required: true\n    },\n    token: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      orders: [],\n      searchQuery: \"\",\n      currentPage: 1,\n      ordersPerPage: 8,\n      // Display 8 orders per page\n      totalItems: 0 // To track the total number of items\n    };\n  },\n  computed: {\n    filteredOrders() {\n      // Only filter locally if there's no API-based search\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        return this.orders.filter(order => {\n          return order.id.toString().includes(query) || order.reference.toLowerCase().includes(query) || order.customer.toLowerCase().includes(query) || order.date.toLowerCase().includes(query);\n        });\n      }\n      return this.orders; // Use the API-provided paginated results if no local search\n    },\n    totalPages() {\n      return Math.ceil(this.totalItems / this.ordersPerPage);\n    },\n    pageRange() {\n      let range = [];\n      const maxPagesToShow = 10;\n      const startPage = Math.max(1, this.currentPage - 4);\n      const endPage = Math.min(this.totalPages, startPage + maxPagesToShow - 1);\n      for (let page = startPage; page <= endPage; page++) {\n        range.push(page);\n      }\n      return range;\n    },\n    paginatedOrders() {\n      return this.filteredOrders; // Directly return filtered orders\n    }\n  },\n  mounted() {\n    this.fetchOrders(); // Fetch orders on component mount\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await axios.get(`${this.apiBaseUrl}/orders`, {\n          headers: {\n            Authorization: `Bearer ${this.token}`\n          },\n          params: {\n            searchterm: this.searchQuery,\n            page: this.currentPage,\n            per_page: this.ordersPerPage\n          }\n        });\n        console.log(\"API Response:\", response.data);\n        this.orders = response.data.data.list; // API paginated data\n        this.totalItems = response.data.data.pagination.total_items;\n        console.log(\"Orders for Page:\", this.currentPage, this.orders);\n      } catch (error) {\n        console.error(\"Fout bij het ophalen van bestellingen:\", error);\n      }\n    },\n    onSearchInput() {\n      // Reset current page to 1 when search is updated\n      this.currentPage = 1;\n      this.fetchOrders(); // Fetch orders again on search change\n    },\n    goToPage(page) {\n      if (page > 0 && page <= this.totalPages) {\n        this.currentPage = page;\n        this.fetchOrders(); // Fetch orders again when page is changed\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","apiBaseUrl","type","String","required","translations","Object","token","data","orders","searchQuery","currentPage","ordersPerPage","totalItems","computed","filteredOrders","query","toLowerCase","filter","order","id","toString","includes","reference","customer","date","totalPages","Math","ceil","pageRange","range","maxPagesToShow","startPage","max","endPage","min","page","push","paginatedOrders","mounted","fetchOrders","methods","response","get","headers","Authorization","params","searchterm","per_page","console","log","list","pagination","total_items","error","onSearchInput","goToPage"],"sources":["C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderOverview.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-overview-container\">\r\n    <h2>Bestellingen</h2>\r\n\r\n    <!-- Search Bar -->\r\n    <div class=\"search-bar-order-overview mb-3\">\r\n      <div class=\"input-group\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          v-model=\"searchQuery\"\r\n          placeholder=\"Zoek op ID, Referentie, Klant of Datum\"\r\n          @focus=\"$emit('focus-state-change', true)\"\r\n          @blur=\"$emit('focus-state-change', false)\"\r\n          @input=\"onSearchInput\"\r\n        />\r\n        <span class=\"input-group-text\">\r\n          <i class=\"fas fa-search\"></i>\r\n        </span>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"filteredOrders.length === 0\">\r\n      <p>Geen bestellingen gevonden.</p>\r\n    </div>\r\n    <div v-else>\r\n      <table class=\"table table-striped\">\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Referentie</th>\r\n            <th>Klant</th>\r\n            <th>Betaling</th>\r\n            <th>Datum</th>\r\n            <th>Totaal</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr\r\n            v-for=\"order in paginatedOrders.filter((order) => order)\"\r\n            :key=\"order.id\"\r\n            @click=\"\r\n              $router.push({ name: 'OrderDetails', params: { id: order.id } })\r\n            \"\r\n            style=\"cursor: pointer\"\r\n          >\r\n            <td>{{ order.id }}</td>\r\n            <td>{{ order.reference }}</td>\r\n            <td>{{ order.customer }}</td>\r\n            <td>{{ order.payment_method }}</td>\r\n            <td>{{ order.date }}</td>\r\n            <td>â‚¬{{ (order.total_tax_incl || 0).toFixed(2) }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <!-- Pagination Controls -->\r\n      <nav>\r\n        <ul class=\"pagination justify-content-center\">\r\n          <li class=\"page-item\" :class=\"{ disabled: currentPage === 1 }\">\r\n            <button class=\"page-link\" @click=\"goToPage(currentPage - 1)\">\r\n              Vorige\r\n            </button>\r\n          </li>\r\n\r\n          <!-- Dynamically display pages -->\r\n          <li\r\n            v-for=\"page in pageRange\"\r\n            :key=\"page\"\r\n            class=\"page-item\"\r\n            :class=\"{ active: page === currentPage }\"\r\n          >\r\n            <button class=\"page-link\" @click=\"goToPage(page)\">\r\n              {{ page }}\r\n            </button>\r\n          </li>\r\n\r\n          <li\r\n            class=\"page-item\"\r\n            :class=\"{ disabled: currentPage === totalPages }\"\r\n          >\r\n            <button class=\"page-link\" @click=\"goToPage(currentPage + 1)\">\r\n              Volgende\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"OrderOverview\",\r\n  props: {\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    token: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      orders: [],\r\n      searchQuery: \"\",\r\n      currentPage: 1,\r\n      ordersPerPage: 8, // Display 8 orders per page\r\n      totalItems: 0, // To track the total number of items\r\n    };\r\n  },\r\n  computed: {\r\n    filteredOrders() {\r\n      // Only filter locally if there's no API-based search\r\n      if (this.searchQuery) {\r\n        const query = this.searchQuery.toLowerCase();\r\n        return this.orders.filter((order) => {\r\n          return (\r\n            order.id.toString().includes(query) ||\r\n            order.reference.toLowerCase().includes(query) ||\r\n            order.customer.toLowerCase().includes(query) ||\r\n            order.date.toLowerCase().includes(query)\r\n          );\r\n        });\r\n      }\r\n      return this.orders; // Use the API-provided paginated results if no local search\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.totalItems / this.ordersPerPage);\r\n    },\r\n    pageRange() {\r\n      let range = [];\r\n      const maxPagesToShow = 10;\r\n      const startPage = Math.max(1, this.currentPage - 4);\r\n      const endPage = Math.min(this.totalPages, startPage + maxPagesToShow - 1);\r\n\r\n      for (let page = startPage; page <= endPage; page++) {\r\n        range.push(page);\r\n      }\r\n\r\n      return range;\r\n    },\r\n    paginatedOrders() {\r\n      return this.filteredOrders; // Directly return filtered orders\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchOrders(); // Fetch orders on component mount\r\n  },\r\n  methods: {\r\n    async fetchOrders() {\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/orders`, {\r\n          headers: {\r\n            Authorization: `Bearer ${this.token}`,\r\n          },\r\n          params: {\r\n            searchterm: this.searchQuery,\r\n            page: this.currentPage,\r\n            per_page: this.ordersPerPage,\r\n          },\r\n        });\r\n\r\n        console.log(\"API Response:\", response.data);\r\n        this.orders = response.data.data.list; // API paginated data\r\n        this.totalItems = response.data.data.pagination.total_items;\r\n\r\n        console.log(\"Orders for Page:\", this.currentPage, this.orders);\r\n      } catch (error) {\r\n        console.error(\"Fout bij het ophalen van bestellingen:\", error);\r\n      }\r\n    },\r\n    onSearchInput() {\r\n      // Reset current page to 1 when search is updated\r\n      this.currentPage = 1;\r\n      this.fetchOrders(); // Fetch orders again on search change\r\n    },\r\n    goToPage(page) {\r\n      if (page > 0 && page <= this.totalPages) {\r\n        this.currentPage = page;\r\n        this.fetchOrders(); // Fetch orders again when page is changed\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AA4FA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,KAAK,EAAE;IACLC,UAAU,EAAE;MACVC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,YAAY,EAAE;MACZH,IAAI,EAAEI,MAAM;MACZF,QAAQ,EAAE;IACZ,CAAC;IACDG,KAAK,EAAE;MACLL,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,CAAC;MAAE;MAClBC,UAAU,EAAE,CAAC,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,cAAcA,CAAA,EAAG;MACf;MACA,IAAI,IAAI,CAACL,WAAW,EAAE;QACpB,MAAMM,KAAI,GAAI,IAAI,CAACN,WAAW,CAACO,WAAW,CAAC,CAAC;QAC5C,OAAO,IAAI,CAACR,MAAM,CAACS,MAAM,CAAEC,KAAK,IAAK;UACnC,OACEA,KAAK,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAACN,KAAK,KAClCG,KAAK,CAACI,SAAS,CAACN,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,KAAK,KAC5CG,KAAK,CAACK,QAAQ,CAACP,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,KAAK,KAC3CG,KAAK,CAACM,IAAI,CAACR,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACN,KAAK;QAE3C,CAAC,CAAC;MACJ;MACA,OAAO,IAAI,CAACP,MAAM,EAAE;IACtB,CAAC;IACDiB,UAAUA,CAAA,EAAG;MACX,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACf,UAAS,GAAI,IAAI,CAACD,aAAa,CAAC;IACxD,CAAC;IACDiB,SAASA,CAAA,EAAG;MACV,IAAIC,KAAI,GAAI,EAAE;MACd,MAAMC,cAAa,GAAI,EAAE;MACzB,MAAMC,SAAQ,GAAIL,IAAI,CAACM,GAAG,CAAC,CAAC,EAAE,IAAI,CAACtB,WAAU,GAAI,CAAC,CAAC;MACnD,MAAMuB,OAAM,GAAIP,IAAI,CAACQ,GAAG,CAAC,IAAI,CAACT,UAAU,EAAEM,SAAQ,GAAID,cAAa,GAAI,CAAC,CAAC;MAEzE,KAAK,IAAIK,IAAG,GAAIJ,SAAS,EAAEI,IAAG,IAAKF,OAAO,EAAEE,IAAI,EAAE,EAAE;QAClDN,KAAK,CAACO,IAAI,CAACD,IAAI,CAAC;MAClB;MAEA,OAAON,KAAK;IACd,CAAC;IACDQ,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACvB,cAAc,EAAE;IAC9B;EACF,CAAC;EACDwB,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;EACtB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAME,QAAO,GAAI,MAAM5C,KAAK,CAAC6C,GAAG,CAAC,GAAG,IAAI,CAAC1C,UAAU,SAAS,EAAE;UAC5D2C,OAAO,EAAE;YACPC,aAAa,EAAE,UAAU,IAAI,CAACtC,KAAK;UACrC,CAAC;UACDuC,MAAM,EAAE;YACNC,UAAU,EAAE,IAAI,CAACrC,WAAW;YAC5B0B,IAAI,EAAE,IAAI,CAACzB,WAAW;YACtBqC,QAAQ,EAAE,IAAI,CAACpC;UACjB;QACF,CAAC,CAAC;QAEFqC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAER,QAAQ,CAAClC,IAAI,CAAC;QAC3C,IAAI,CAACC,MAAK,GAAIiC,QAAQ,CAAClC,IAAI,CAACA,IAAI,CAAC2C,IAAI,EAAE;QACvC,IAAI,CAACtC,UAAS,GAAI6B,QAAQ,CAAClC,IAAI,CAACA,IAAI,CAAC4C,UAAU,CAACC,WAAW;QAE3DJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACvC,WAAW,EAAE,IAAI,CAACF,MAAM,CAAC;MAChE,EAAE,OAAO6C,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE;IACF,CAAC;IACDC,aAAaA,CAAA,EAAG;MACd;MACA,IAAI,CAAC5C,WAAU,GAAI,CAAC;MACpB,IAAI,CAAC6B,WAAW,CAAC,CAAC,EAAE;IACtB,CAAC;IACDgB,QAAQA,CAACpB,IAAI,EAAE;MACb,IAAIA,IAAG,GAAI,KAAKA,IAAG,IAAK,IAAI,CAACV,UAAU,EAAE;QACvC,IAAI,CAACf,WAAU,GAAIyB,IAAI;QACvB,IAAI,CAACI,WAAW,CAAC,CAAC,EAAE;MACtB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}