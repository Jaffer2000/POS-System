{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      previousItemCount: 0,\n      selectedProduct: null,\n      quantityMode: false,\n      quantityEditable: false,\n      editableQuantity: 0,\n      discountEditable: false,\n      flatDiscountEditable: false,\n      discountPercentage: 0,\n      flatDiscountAmount: 0,\n      previousDiscountPercentage: 0,\n      previousFlatDiscountAmount: 0,\n      newTotal: 0,\n      cashReceived: 0,\n      showPopup: false,\n      showModal: false,\n      selectedPaymentMethod: null,\n      showPaymentWarning: false,\n      showPaymentConfirmation: false,\n      showReceiptPopup: false\n    };\n  },\n  props: {\n    orderItems: {\n      type: Array,\n      required: true\n    },\n    apiBaseUrl: {\n      type: String,\n      required: true\n    },\n    translations: {\n      type: Object,\n      required: true\n    },\n    token: {\n      type: String,\n      required: true\n    }\n  },\n  watch: {\n    orderItems: {\n      handler(newItems) {\n        // Scroll to the bottom only when an item is added\n        if (newItems.length > this.previousItemCount) {\n          this.scrollToBottom();\n        }\n        // Update previous item count for future comparisons\n        this.previousItemCount = newItems.length;\n      },\n      deep: true\n    },\n    selectedPaymentMethod(newValue) {\n      if (newValue === \"cash\") {\n        this.showPaymentWarning = false; // Hide the warning when \"Contant\" is selected\n      }\n    },\n    showModal(newValue) {\n      // Emit modal-state-change based on showModal value\n      this.$emit(\"modal-state-change\", newValue);\n    }\n  },\n  computed: {\n    totalPrice() {\n      const discountedSubtotal = this.subtotal - this.discount;\n      return discountedSubtotal + this.vat;\n    },\n    subtotal() {\n      return this.orderItems.reduce((total, item) => total + (parseFloat(item.price_tax_excl) || 0) * item.quantity, 0);\n    },\n    vat() {\n      const totalTaxable = this.orderItems.reduce((total, item) => total + (parseFloat(item.price_tax_incl) - parseFloat(item.price_tax_excl)) * item.quantity, 0);\n      return totalTaxable; // Calculated VAT based on the taxable amount\n    },\n    discount() {\n      if (this.flatDiscountAmount > 0) {\n        // Use flat discount if set\n        return this.flatDiscountAmount;\n      } else if (this.discountPercentage > 0) {\n        const totalBeforeDiscount = this.subtotal + this.vat; // Calculate discount based on the total price (subtotal + vat)\n        return this.discountPercentage / 100 * totalBeforeDiscount;\n      }\n      return 0; // No discount\n    },\n    calculateChange() {\n      return (this.cashReceived - this.totalPrice).toFixed(2);\n    }\n  },\n  methods: {\n    removeItem(refcode) {\n      this.$emit(\"remove-item\", refcode);\n    },\n    selectProduct(product) {\n      this.selectedProduct = product;\n      this.editableQuantity = product.quantity;\n    },\n    setQuantityMode() {\n      this.quantityEditable = true;\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const orderList = this.$refs.orderList;\n        if (orderList) {\n          orderList.scrollTop = orderList.scrollHeight;\n        }\n      });\n    },\n    handleKeyPress(key) {\n      if (this.selectedProduct && this.quantityEditable) {\n        // Handle quantity input\n        this.handleInput(\"editableQuantity\", key);\n      } else if (this.discountEditable) {\n        // Handle percentage discount input\n        this.handleInput(\"discountPercentage\", key);\n      } else if (this.flatDiscountEditable) {\n        // Handle flat discount input\n        this.handleInput(\"flatDiscountAmount\", key);\n      }\n    },\n    handleInput(field, key) {\n      const currentValue = this[field]?.toString() || \"0\";\n      if (!isNaN(key)) {\n        // Append numeric key\n        this[field] = currentValue === \"0\" ? key.toString() : currentValue + key.toString();\n      } else if (key === \"delete\") {\n        // Remove the last character\n        this[field] = currentValue.slice(0, -1) || \"0\";\n      } else if (key === \".\") {\n        // Append a dot if not already present\n        if (!currentValue.includes(\".\")) {\n          this[field] = currentValue + \".\";\n        }\n      } else if (key === \"enter\") {\n        // Convert the input to a number when confirmed\n        this[field] = parseFloat(this[field]) || 0;\n      }\n    },\n    confirmQuantity() {\n      const newQuantity = parseInt(this.editableQuantity, 10);\n      if (isNaN(newQuantity) || this.editableQuantity === \"\") {\n        this.editableQuantity = this.selectedProduct.quantity; // Reset editable quantity to the original\n        this.quantityEditable = false;\n        return;\n      }\n      if (newQuantity === 0) {\n        this.$emit(\"remove-item\", this.selectedProduct.refcode);\n      } else {\n        this.$emit(\"set-quantity\", {\n          refcode: this.selectedProduct.refcode,\n          setQuantity: newQuantity\n        });\n      }\n      this.quantityEditable = false;\n    },\n    handleOutsideClick(event) {\n      if (this.quantityEditable && !this.$el.contains(event.target)) {\n        this.confirmQuantity();\n      }\n    },\n    editDiscount() {\n      this.discountEditable = true;\n      this.flatDiscountEditable = false; // Ensure flat discount is not active\n    },\n    editFlatDiscount() {\n      this.flatDiscountEditable = true;\n      this.discountEditable = false; // Ensure percentage discount is not active\n    },\n    startEditingDiscount() {\n      this.previousDiscountPercentage = this.discountPercentage; // Save the current value\n      this.discountEditable = true; // Allow editing\n    },\n    confirmDiscount(type) {\n      if (type === \"percentage\") {\n        if (this.discountPercentage < 0 || this.discountPercentage > 100) {\n          // Display the popup for invalid percentage\n          this.showPopup = true;\n          return;\n        }\n        this.flatDiscountAmount = 0; // Clear flat discount\n        this.discountEditable = false;\n      } else if (type === \"amount\") {\n        if (this.flatDiscountAmount < 0 || this.flatDiscountAmount > this.subtotal + this.vat) {\n          // Display the popup for invalid amount\n          this.showPopup = true;\n          return;\n        }\n        this.discountPercentage = 0; // Clear percentage discount\n        this.flatDiscountEditable = false;\n      }\n\n      // Ensure the values are numbers\n      this.discountPercentage = parseFloat(this.discountPercentage) || 0;\n      this.flatDiscountAmount = parseFloat(this.flatDiscountAmount) || 0;\n\n      // Optionally send data to the server\n      const discountPayload = {\n        discount_type: type,\n        value: type === \"percentage\" ? this.discountPercentage : this.flatDiscountAmount\n      };\n      fetch(`${this.apiBaseUrl}/orders/apply-discount`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.token}`\n        },\n        body: JSON.stringify(discountPayload)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error(`Server error: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        if (data && data.new_total) {\n          this.newTotal = data.new_total;\n        }\n      }).catch(error => {\n        console.error(\"Error applying discount:\", error);\n      });\n    },\n    // Method to close the popup\n    closePopup() {\n      this.showPopup = false; // Hide the popup\n      this.discountPercentage = this.previousDiscountPercentage || 0;\n      this.flatDiscountAmount = this.previousFlatDiscountAmount || 0;\n    },\n    openModal() {\n      this.showModal = true;\n    },\n    closeModal() {\n      this.showModal = false; // Hide modal\n      this.showPaymentWarning = false;\n      this.selectedPaymentMethod = null;\n    },\n    async confirmCheckout() {\n      if (!this.selectedPaymentMethod) {\n        this.showPaymentWarning = true;\n        return;\n      }\n\n      // Show confirmation popup after payment attempt\n      this.showPaymentConfirmation = true;\n      this.showPaymentWarning = false;\n    },\n    async createNewOrder() {\n      try {\n        const response = await axios.post(`${this.apiBaseUrl}/orders/new`, {}, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n        this.handleNewOrderResponse(response.data);\n      } catch (error) {\n        console.error(\"Error creating new order:\", error);\n      }\n    },\n    async cancelOrder() {\n      try {\n        const response = await axios.post(`${this.apiBaseUrl}/orders/cancel`, {}, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n        this.handleCancelOrderResponse(response.data);\n      } catch (error) {\n        console.error(\"Error canceling order:\", error);\n      }\n    },\n    async cancelPayment() {\n      try {\n        const response = await axios.post(`${this.apiBaseUrl}/payment/cancel`, {}, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n        this.handleCancelOrderResponse(response.data);\n      } catch (error) {\n        console.error(\"Error canceling payment:\", error);\n      }\n    },\n    async handlePaymentConfirmation(success) {\n      if (success) {\n        // Proceed with successful payment handling\n        console.log(\"Payment completed successfully.\");\n\n        // Determine payment method for the API\n        const amount = this.totalPrice.toFixed(2);\n        const paymentMethod = this.selectedPaymentMethod === \"cash\" ? \"CASH\" : \"CREDIT_CARD_OFFLINE\";\n        try {\n          // Step 1: Call the checkout endpoint\n          const checkoutResponse = await axios.post(`${this.apiBaseUrl}/checkout`, {\n            amount: amount,\n            paymentMethod: paymentMethod\n          }, {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${this.token}`\n            }\n          });\n\n          // Handle the checkout response\n          this.handleCheckoutResponse(checkoutResponse.data);\n\n          // Step 2: Depending on the selected payment method, call the respective payment endpoint\n          let paymentResponse;\n          if (this.selectedPaymentMethod === \"cash\") {\n            paymentResponse = await axios.post(`${this.apiBaseUrl}/payment/cash`, {\n              amount,\n              paymentMethod\n            }, {\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.token}`\n              }\n            });\n            // Handle successful cash payment response\n            this.handleCashPaymentResponse(paymentResponse.data);\n          } else if (this.selectedPaymentMethod === \"card\") {\n            paymentResponse = await axios.post(`${this.apiBaseUrl}/payment/card`, {\n              amount,\n              paymentMethod\n            }, {\n              headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.token}`\n              }\n            });\n            // Handle successful card payment response\n            this.handleCardPaymentResponse(paymentResponse.data);\n          }\n        } catch (error) {\n          if (error.response && error.response.status === 400) {\n            console.log(\"Checkout failed:\", error.response.data);\n          } else {\n            console.error(\"An unexpected error occurred:\", error);\n          }\n        }\n\n        // Reset states and close popups\n        this.showPaymentConfirmation = false;\n        this.selectedPaymentMethod = null;\n        this.showReceiptPopup = true;\n      } else {\n        // Close the confirmation popup without proceeding\n        this.showPaymentConfirmation = false;\n      }\n    },\n    async handleReceiptSelection(wantsReceipt) {\n      this.showReceiptPopup = false;\n\n      // If the user wants a receipt, print it first\n      if (wantsReceipt) {\n        this.showModal = false;\n        this.printReceipt(); // Print receipt first\n        console.log(\"User wants a receipt.\");\n      } else {\n        this.showModal = false;\n        console.log(\"User does not want a receipt.\");\n      }\n\n      // Wait for createNewOrder to complete\n      await this.createNewOrder();\n\n      // Reset the discount input to 0\n      this.discountPercentage = 0;\n      this.flatDiscountAmount = 0;\n\n      // Delay clearing the UI state for orderItems by 3 seconds\n      setTimeout(() => {\n        this.$emit(\"clear-order-items\");\n      }, 3000);\n    },\n    async printReceipt() {\n      try {\n        // Retrieve all orders with sorting by date (most recent first)\n        const ordersResponse = await axios.get(`${this.apiBaseUrl}/orders?sort=date_desc&page=1&per_page=1`,\n        // Assuming API supports sorting by date and pagination\n        {\n          headers: {\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n\n        // Ensure we get a valid order from the response\n        const ordersData = ordersResponse.data.data.list;\n        if (ordersData.length === 0) {\n          alert(\"No orders found.\");\n          return;\n        }\n\n        // Get the most recent order (the first in the sorted list)\n        const order = ordersData[0];\n\n        // Log the order ID of the most recent order\n        console.log(\"Order ID for printing:\", order.id);\n\n        // Call the print document endpoint directly with the most recent order ID\n        const printResponse = await axios.post(`${this.apiBaseUrl}/orders/print-document`, {\n          order_id: order.id,\n          // Pass the most recent order ID here\n          print_type: \"RECEIPT\" // Print type is always 'RECEIPT'\n        }, {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${this.token}`\n          }\n        });\n        this.handlePrintReceiptResponse(printResponse.data);\n      } catch (error) {\n        console.error(\"Error printing receipt:\", error);\n      }\n    },\n    handleCheckoutResponse(response) {\n      if (response.status === \"success\") {\n        // Proceed to payment confirmation step\n        this.showPaymentConfirmation = true;\n      } else if (response.status === \"fail\") {\n        // Handle failure scenarios, e.g., show an error message\n        console.error(\"Checkout failed:\", response.data.message);\n      }\n    }\n  },\n  mounted() {\n    document.addEventListener(\"click\", this.handleOutsideClick);\n  },\n  beforeUnmount() {\n    document.removeEventListener(\"click\", this.handleOutsideClick);\n  }\n};","map":{"version":3,"names":["axios","data","previousItemCount","selectedProduct","quantityMode","quantityEditable","editableQuantity","discountEditable","flatDiscountEditable","discountPercentage","flatDiscountAmount","previousDiscountPercentage","previousFlatDiscountAmount","newTotal","cashReceived","showPopup","showModal","selectedPaymentMethod","showPaymentWarning","showPaymentConfirmation","showReceiptPopup","props","orderItems","type","Array","required","apiBaseUrl","String","translations","Object","token","watch","handler","newItems","length","scrollToBottom","deep","newValue","$emit","computed","totalPrice","discountedSubtotal","subtotal","discount","vat","reduce","total","item","parseFloat","price_tax_excl","quantity","totalTaxable","price_tax_incl","totalBeforeDiscount","calculateChange","toFixed","methods","removeItem","refcode","selectProduct","product","setQuantityMode","$nextTick","orderList","$refs","scrollTop","scrollHeight","handleKeyPress","key","handleInput","field","currentValue","toString","isNaN","slice","includes","confirmQuantity","newQuantity","parseInt","setQuantity","handleOutsideClick","event","$el","contains","target","editDiscount","editFlatDiscount","startEditingDiscount","confirmDiscount","discountPayload","discount_type","value","fetch","method","headers","Authorization","body","JSON","stringify","then","response","ok","Error","status","json","new_total","catch","error","console","closePopup","openModal","closeModal","confirmCheckout","createNewOrder","post","handleNewOrderResponse","cancelOrder","handleCancelOrderResponse","cancelPayment","handlePaymentConfirmation","success","log","amount","paymentMethod","checkoutResponse","handleCheckoutResponse","paymentResponse","handleCashPaymentResponse","handleCardPaymentResponse","handleReceiptSelection","wantsReceipt","printReceipt","setTimeout","ordersResponse","get","ordersData","list","alert","order","id","printResponse","order_id","print_type","handlePrintReceiptResponse","message","mounted","document","addEventListener","beforeUnmount","removeEventListener"],"sources":["C:\\wamp64\\www\\tbpos\\src\\front\\src\\components\\OrderSummary.vue"],"sourcesContent":["<template>\r\n  <div class=\"order-summary\">\r\n    <div class=\"space\" style=\"height: 50px\"></div>\r\n    <div ref=\"orderList\" class=\"order-items-list\">\r\n      <div\r\n        v-for=\"item in orderItems\"\r\n        :key=\"item.refcode\"\r\n        :class=\"[\r\n          'order-item',\r\n          {\r\n            selected:\r\n              selectedProduct && selectedProduct.refcode === item.refcode,\r\n          },\r\n        ]\"\r\n        @click=\"selectProduct(item)\"\r\n      >\r\n        <img :src=\"item.image_url\" :alt=\"item.name\" class=\"product-image\" />\r\n\r\n        <div class=\"item-details\">\r\n          <div class=\"item-header\">\r\n            <span class=\"product-name\">{{ item.name }}</span>\r\n            <span class=\"product-price\">\r\n              €{{\r\n                item.price_tax_incl ? item.price_tax_incl.toFixed(2) : \"0.00\"\r\n              }}\r\n              <span style=\"font-weight: normal\">(incl. btw)</span>\r\n            </span>\r\n\r\n            <span class=\"product-price1\"\r\n              >€{{ item.price_tax_excl.toFixed(2) }}\r\n              <span style=\"font-weight: normal\">(excl. btw)</span></span\r\n            >\r\n          </div>\r\n\r\n          <div class=\"quantity-controls\">\r\n            <button\r\n              @click=\"\r\n                $emit('update-quantity', {\r\n                  refcode: item.refcode,\r\n                  quantity: -1,\r\n                })\r\n              \"\r\n              class=\"quantity-button\"\r\n            >\r\n              <i class=\"fa-solid fa-minus\"></i>\r\n            </button>\r\n            <div class=\"quantity-wrapper\">\r\n              <input\r\n                v-if=\"\r\n                  quantityEditable &&\r\n                  selectedProduct &&\r\n                  selectedProduct.refcode === item.refcode\r\n                \"\r\n                v-model=\"editableQuantity\"\r\n                type=\"number\"\r\n                class=\"editable-quantity\"\r\n                @click.stop\r\n              />\r\n              <button\r\n                v-if=\"\r\n                  quantityEditable &&\r\n                  selectedProduct &&\r\n                  selectedProduct.refcode === item.refcode\r\n                \"\r\n                @click=\"confirmQuantity\"\r\n                class=\"checkmark-button\"\r\n              >\r\n                <i class=\"fa-solid fa-check\"></i>\r\n              </button>\r\n              <div v-else class=\"quantity-counter\">{{ item.quantity }}</div>\r\n            </div>\r\n            <button\r\n              @click=\"\r\n                $emit('update-quantity', { refcode: item.refcode, quantity: 1 })\r\n              \"\r\n              class=\"quantity-button\"\r\n            >\r\n              <i class=\"fa-solid fa-plus\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <button @click=\"removeItem(item.refcode)\" class=\"delete-button\">\r\n          <i class=\"fa-solid fa-trash-can\"></i>\r\n        </button>\r\n      </div>\r\n      <div class=\"scroll-spacer\"></div>\r\n    </div>\r\n\r\n    <div class=\"bottom-section\">\r\n      <div class=\"keyboard\">\r\n        <div class=\"keyboard-row\">\r\n          <button @click=\"setQuantityMode\">Aant.</button>\r\n          <button @click=\"handleKeyPress(1)\">1</button>\r\n          <button @click=\"handleKeyPress(2)\">2</button>\r\n          <button @click=\"handleKeyPress(3)\">3</button>\r\n        </div>\r\n        <div class=\"keyboard-row\">\r\n          <button @click=\"editFlatDiscount\">Prijs</button>\r\n          <button @click=\"handleKeyPress(4)\">4</button>\r\n          <button @click=\"handleKeyPress(5)\">5</button>\r\n          <button @click=\"handleKeyPress(6)\">6</button>\r\n        </div>\r\n        <div class=\"keyboard-row\">\r\n          <button @click=\"editDiscount\">%</button>\r\n          <button @click=\"handleKeyPress(7)\">7</button>\r\n          <button @click=\"handleKeyPress(8)\">8</button>\r\n          <button @click=\"handleKeyPress(9)\">9</button>\r\n        </div>\r\n        <div class=\"keyboard-row\">\r\n          <button @click=\"handleKeyPress('delete')\">Del</button>\r\n          <button>+/-</button>\r\n          <button @click=\"handleKeyPress(0)\">0</button>\r\n          <button @click=\"handleKeyPress('.')\">.</button>\r\n        </div>\r\n        <button class=\"customer-button\">\r\n          <div class=\"user-icon\">\r\n            <i class=\"fas fa-user\"></i>\r\n          </div>\r\n          Klant\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"summary-of-costs\">\r\n        <div class=\"cost-item\">\r\n          Subtotaal <span class=\"price\">€{{ subtotal.toFixed(2) }}</span>\r\n        </div>\r\n        <div class=\"cost-item\">\r\n          Korting\r\n          <span v-if=\"!discountEditable && !flatDiscountEditable\" class=\"price\">\r\n            €{{ discount.toFixed(2) }}\r\n          </span>\r\n\r\n          <!-- Percentage Discount Input -->\r\n          <div\r\n            class=\"discount-input-wrapper\"\r\n            :class=\"{ hidden: !discountEditable }\"\r\n          >\r\n            <input\r\n              v-model=\"discountPercentage\"\r\n              type=\"text\"\r\n              class=\"discount-input\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              step=\"1\"\r\n            />\r\n            <button\r\n              @click=\"confirmDiscount('percentage')\"\r\n              class=\"checkmark-button\"\r\n            >\r\n              <i class=\"fa-solid fa-check\"></i>\r\n            </button>\r\n          </div>\r\n\r\n          <!-- Flat Amount Discount Input -->\r\n          <div\r\n            class=\"discount-input-wrapper\"\r\n            :class=\"{ hidden: !flatDiscountEditable }\"\r\n          >\r\n            <input\r\n              v-model=\"flatDiscountAmount\"\r\n              type=\"text\"\r\n              class=\"discount-input\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n            />\r\n            <button @click=\"confirmDiscount('amount')\" class=\"checkmark-button\">\r\n              <i class=\"fa-solid fa-check\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"cost-item\">\r\n          Btw <span class=\"price\">€{{ vat.toFixed(2) }}</span>\r\n        </div>\r\n        <div class=\"cost-item-total\">\r\n          Totaalprijs\r\n          <span class=\"total-price\">€{{ totalPrice.toFixed(2) }}</span>\r\n        </div>\r\n        <button class=\"checkout-button\" @click=\"openModal\">\r\n          Doorgaan naar afrekenen\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"showPopup\" class=\"popup-overlay\">\r\n      <div class=\"popup-message\">\r\n        <p>\r\n          {{ this.translations.invalidDiscount }}\r\n        </p>\r\n        <button @click=\"closePopup\">Sluiten</button>\r\n      </div>\r\n    </div>\r\n    <!-- Checkout Modal -->\r\n    <div v-if=\"showModal\" class=\"modal-overlay\" @click.self=\"closeModal\">\r\n      <div class=\"modal-content\">\r\n        <h2>Betalen</h2>\r\n\r\n        <div class=\"order-items-scrollable\">\r\n          <div\r\n            v-for=\"item in orderItems\"\r\n            :key=\"item.refcode\"\r\n            class=\"modal-order-item\"\r\n          >\r\n            <div class=\"item-info\">\r\n              <span class=\"product-name1\">{{ item.name }}</span>\r\n              <span class=\"product-quantity\">x{{ item.quantity }}</span>\r\n              <span class=\"product-pricee\"\r\n                >€{{ item.price_tax_incl.toFixed(2) }}</span\r\n              >\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <p class=\"total-price1\">Totaalprijs: €{{ totalPrice.toFixed(2) }}</p>\r\n\r\n        <div class=\"payment-methods\">\r\n          <h3>Selecteer Betaalmethode</h3>\r\n          <label>\r\n            <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"cash\" />\r\n            Contant\r\n          </label>\r\n          <label>\r\n            <input type=\"radio\" v-model=\"selectedPaymentMethod\" value=\"card\" />\r\n            Kaart\r\n          </label>\r\n\r\n          <div v-if=\"selectedPaymentMethod === 'cash'\" class=\"cash-fields\">\r\n            <input\r\n              type=\"number\"\r\n              v-model.number=\"cashReceived\"\r\n              class=\"received-input\"\r\n              placeholder=\"Ontvangen bedrag\"\r\n            />\r\n            <input\r\n              type=\"text\"\r\n              class=\"change-input\"\r\n              :value=\"calculateChange\"\r\n              placeholder=\"Wisselgeld\"\r\n              readonly\r\n            />\r\n          </div>\r\n\r\n          <p v-if=\"showPaymentWarning\" class=\"payment-warning\">\r\n            {{ this.translations.paymentWarning }}\r\n          </p>\r\n        </div>\r\n\r\n        <button @click=\"confirmCheckout\" class=\"confirm-checkout-modal\">\r\n          Bevestig Betaling\r\n        </button>\r\n        <button @click=\"closeModal\" class=\"close-modal\">Sluiten</button>\r\n      </div>\r\n    </div>\r\n    <!-- Confirmation Popup -->\r\n    <div v-if=\"showPaymentConfirmation\" class=\"confirmation-popup-overlay\">\r\n      <div class=\"confirmation-popup\">\r\n        <p>{{ this.translations.paymentConfirmation }}</p>\r\n        <button @click=\"handlePaymentConfirmation(true)\">Ja</button>\r\n        <button @click=\"handlePaymentConfirmation(false)\">Nee</button>\r\n      </div>\r\n    </div>\r\n    <!-- Receipt Popup -->\r\n    <div v-if=\"showReceiptPopup\" class=\"confirmation-popup-overlay\">\r\n      <div class=\"confirmation-popup\">\r\n        <p>{{ this.translations.receiptConfirmation }}</p>\r\n        <button @click=\"handleReceiptSelection(true)\">Ja</button>\r\n        <button @click=\"handleReceiptSelection(false)\">Nee</button>\r\n      </div>\r\n    </div>\r\n    <div id=\"receipt-content\" style=\"display: none\">\r\n      <h2>Receipt</h2>\r\n      <p>Total: €{{ totalPrice.toFixed(2) }}</p>\r\n      <div\r\n        v-for=\"item in orderItems\"\r\n        :key=\"item.refcode\"\r\n        class=\"modal-order-item\"\r\n      >\r\n        <div class=\"item-info\">\r\n          <span class=\"product-name1\">{{ item.name }}</span>\r\n          <span class=\"product-quantity\">x{{ item.quantity }}</span>\r\n          <span class=\"product-pricee\"\r\n            >€{{ item.price_tax_incl.toFixed(2) }}</span\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      previousItemCount: 0,\r\n      selectedProduct: null,\r\n      quantityMode: false,\r\n      quantityEditable: false,\r\n      editableQuantity: 0,\r\n      discountEditable: false,\r\n      flatDiscountEditable: false,\r\n      discountPercentage: 0,\r\n      flatDiscountAmount: 0,\r\n      previousDiscountPercentage: 0,\r\n      previousFlatDiscountAmount: 0,\r\n      newTotal: 0,\r\n      cashReceived: 0,\r\n      showPopup: false,\r\n      showModal: false,\r\n      selectedPaymentMethod: null,\r\n      showPaymentWarning: false,\r\n      showPaymentConfirmation: false,\r\n      showReceiptPopup: false,\r\n    };\r\n  },\r\n  props: {\r\n    orderItems: {\r\n      type: Array,\r\n      required: true,\r\n    },\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n    token: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  watch: {\r\n    orderItems: {\r\n      handler(newItems) {\r\n        // Scroll to the bottom only when an item is added\r\n        if (newItems.length > this.previousItemCount) {\r\n          this.scrollToBottom();\r\n        }\r\n        // Update previous item count for future comparisons\r\n        this.previousItemCount = newItems.length;\r\n      },\r\n      deep: true,\r\n    },\r\n    selectedPaymentMethod(newValue) {\r\n      if (newValue === \"cash\") {\r\n        this.showPaymentWarning = false; // Hide the warning when \"Contant\" is selected\r\n      }\r\n    },\r\n    showModal(newValue) {\r\n      // Emit modal-state-change based on showModal value\r\n      this.$emit(\"modal-state-change\", newValue);\r\n    },\r\n  },\r\n  computed: {\r\n    totalPrice() {\r\n      const discountedSubtotal = this.subtotal - this.discount;\r\n      return discountedSubtotal + this.vat;\r\n    },\r\n    subtotal() {\r\n      return this.orderItems.reduce(\r\n        (total, item) =>\r\n          total + (parseFloat(item.price_tax_excl) || 0) * item.quantity,\r\n        0\r\n      );\r\n    },\r\n    vat() {\r\n      const totalTaxable = this.orderItems.reduce(\r\n        (total, item) =>\r\n          total +\r\n          (parseFloat(item.price_tax_incl) - parseFloat(item.price_tax_excl)) *\r\n            item.quantity,\r\n        0\r\n      );\r\n      return totalTaxable; // Calculated VAT based on the taxable amount\r\n    },\r\n    discount() {\r\n      if (this.flatDiscountAmount > 0) {\r\n        // Use flat discount if set\r\n        return this.flatDiscountAmount;\r\n      } else if (this.discountPercentage > 0) {\r\n        const totalBeforeDiscount = this.subtotal + this.vat; // Calculate discount based on the total price (subtotal + vat)\r\n        return (this.discountPercentage / 100) * totalBeforeDiscount;\r\n      }\r\n      return 0; // No discount\r\n    },\r\n    calculateChange() {\r\n      return (this.cashReceived - this.totalPrice).toFixed(2);\r\n    },\r\n  },\r\n  methods: {\r\n    removeItem(refcode) {\r\n      this.$emit(\"remove-item\", refcode);\r\n    },\r\n    selectProduct(product) {\r\n      this.selectedProduct = product;\r\n      this.editableQuantity = product.quantity;\r\n    },\r\n    setQuantityMode() {\r\n      this.quantityEditable = true;\r\n    },\r\n    scrollToBottom() {\r\n      this.$nextTick(() => {\r\n        const orderList = this.$refs.orderList;\r\n        if (orderList) {\r\n          orderList.scrollTop = orderList.scrollHeight;\r\n        }\r\n      });\r\n    },\r\n    handleKeyPress(key) {\r\n      if (this.selectedProduct && this.quantityEditable) {\r\n        // Handle quantity input\r\n        this.handleInput(\"editableQuantity\", key);\r\n      } else if (this.discountEditable) {\r\n        // Handle percentage discount input\r\n        this.handleInput(\"discountPercentage\", key);\r\n      } else if (this.flatDiscountEditable) {\r\n        // Handle flat discount input\r\n        this.handleInput(\"flatDiscountAmount\", key);\r\n      }\r\n    },\r\n\r\n    handleInput(field, key) {\r\n      const currentValue = this[field]?.toString() || \"0\";\r\n\r\n      if (!isNaN(key)) {\r\n        // Append numeric key\r\n        this[field] =\r\n          currentValue === \"0\" ? key.toString() : currentValue + key.toString();\r\n      } else if (key === \"delete\") {\r\n        // Remove the last character\r\n        this[field] = currentValue.slice(0, -1) || \"0\";\r\n      } else if (key === \".\") {\r\n        // Append a dot if not already present\r\n        if (!currentValue.includes(\".\")) {\r\n          this[field] = currentValue + \".\";\r\n        }\r\n      } else if (key === \"enter\") {\r\n        // Convert the input to a number when confirmed\r\n        this[field] = parseFloat(this[field]) || 0;\r\n      }\r\n    },\r\n    confirmQuantity() {\r\n      const newQuantity = parseInt(this.editableQuantity, 10);\r\n      if (isNaN(newQuantity) || this.editableQuantity === \"\") {\r\n        this.editableQuantity = this.selectedProduct.quantity; // Reset editable quantity to the original\r\n        this.quantityEditable = false;\r\n        return;\r\n      }\r\n\r\n      if (newQuantity === 0) {\r\n        this.$emit(\"remove-item\", this.selectedProduct.refcode);\r\n      } else {\r\n        this.$emit(\"set-quantity\", {\r\n          refcode: this.selectedProduct.refcode,\r\n          setQuantity: newQuantity,\r\n        });\r\n      }\r\n      this.quantityEditable = false;\r\n    },\r\n    handleOutsideClick(event) {\r\n      if (this.quantityEditable && !this.$el.contains(event.target)) {\r\n        this.confirmQuantity();\r\n      }\r\n    },\r\n    editDiscount() {\r\n      this.discountEditable = true;\r\n      this.flatDiscountEditable = false; // Ensure flat discount is not active\r\n    },\r\n    editFlatDiscount() {\r\n      this.flatDiscountEditable = true;\r\n      this.discountEditable = false; // Ensure percentage discount is not active\r\n    },\r\n    startEditingDiscount() {\r\n      this.previousDiscountPercentage = this.discountPercentage; // Save the current value\r\n      this.discountEditable = true; // Allow editing\r\n    },\r\n    confirmDiscount(type) {\r\n      if (type === \"percentage\") {\r\n        if (this.discountPercentage < 0 || this.discountPercentage > 100) {\r\n          // Display the popup for invalid percentage\r\n          this.showPopup = true;\r\n          return;\r\n        }\r\n        this.flatDiscountAmount = 0; // Clear flat discount\r\n        this.discountEditable = false;\r\n      } else if (type === \"amount\") {\r\n        if (\r\n          this.flatDiscountAmount < 0 ||\r\n          this.flatDiscountAmount > this.subtotal + this.vat\r\n        ) {\r\n          // Display the popup for invalid amount\r\n          this.showPopup = true;\r\n          return;\r\n        }\r\n\r\n        this.discountPercentage = 0; // Clear percentage discount\r\n        this.flatDiscountEditable = false;\r\n      }\r\n\r\n      // Ensure the values are numbers\r\n      this.discountPercentage = parseFloat(this.discountPercentage) || 0;\r\n      this.flatDiscountAmount = parseFloat(this.flatDiscountAmount) || 0;\r\n\r\n      // Optionally send data to the server\r\n      const discountPayload = {\r\n        discount_type: type,\r\n        value:\r\n          type === \"percentage\"\r\n            ? this.discountPercentage\r\n            : this.flatDiscountAmount,\r\n      };\r\n\r\n      fetch(`${this.apiBaseUrl}/orders/apply-discount`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${this.token}`,\r\n        },\r\n        body: JSON.stringify(discountPayload),\r\n      })\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(`Server error: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          if (data && data.new_total) {\r\n            this.newTotal = data.new_total;\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error applying discount:\", error);\r\n        });\r\n    },\r\n    // Method to close the popup\r\n    closePopup() {\r\n      this.showPopup = false; // Hide the popup\r\n      this.discountPercentage = this.previousDiscountPercentage || 0;\r\n      this.flatDiscountAmount = this.previousFlatDiscountAmount || 0;\r\n    },\r\n    openModal() {\r\n      this.showModal = true;\r\n    },\r\n    closeModal() {\r\n      this.showModal = false; // Hide modal\r\n      this.showPaymentWarning = false;\r\n      this.selectedPaymentMethod = null;\r\n    },\r\n    async confirmCheckout() {\r\n      if (!this.selectedPaymentMethod) {\r\n        this.showPaymentWarning = true;\r\n        return;\r\n      }\r\n\r\n      // Show confirmation popup after payment attempt\r\n      this.showPaymentConfirmation = true;\r\n      this.showPaymentWarning = false;\r\n    },\r\n    async createNewOrder() {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/new`,\r\n          {},\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        this.handleNewOrderResponse(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error creating new order:\", error);\r\n      }\r\n    },\r\n    async cancelOrder() {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/cancel`,\r\n          {},\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        this.handleCancelOrderResponse(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error canceling order:\", error);\r\n      }\r\n    },\r\n    async cancelPayment() {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/payment/cancel`,\r\n          {},\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        this.handleCancelOrderResponse(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error canceling payment:\", error);\r\n      }\r\n    },\r\n    async handlePaymentConfirmation(success) {\r\n      if (success) {\r\n        // Proceed with successful payment handling\r\n        console.log(\"Payment completed successfully.\");\r\n\r\n        // Determine payment method for the API\r\n        const amount = this.totalPrice.toFixed(2);\r\n        const paymentMethod =\r\n          this.selectedPaymentMethod === \"cash\"\r\n            ? \"CASH\"\r\n            : \"CREDIT_CARD_OFFLINE\";\r\n\r\n        try {\r\n          // Step 1: Call the checkout endpoint\r\n          const checkoutResponse = await axios.post(\r\n            `${this.apiBaseUrl}/checkout`,\r\n            {\r\n              amount: amount,\r\n              paymentMethod: paymentMethod,\r\n            },\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${this.token}`,\r\n              },\r\n            }\r\n          );\r\n\r\n          // Handle the checkout response\r\n          this.handleCheckoutResponse(checkoutResponse.data);\r\n\r\n          // Step 2: Depending on the selected payment method, call the respective payment endpoint\r\n          let paymentResponse;\r\n\r\n          if (this.selectedPaymentMethod === \"cash\") {\r\n            paymentResponse = await axios.post(\r\n              `${this.apiBaseUrl}/payment/cash`,\r\n              { amount, paymentMethod },\r\n              {\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  Authorization: `Bearer ${this.token}`,\r\n                },\r\n              }\r\n            );\r\n            // Handle successful cash payment response\r\n            this.handleCashPaymentResponse(paymentResponse.data);\r\n          } else if (this.selectedPaymentMethod === \"card\") {\r\n            paymentResponse = await axios.post(\r\n              `${this.apiBaseUrl}/payment/card`,\r\n              { amount, paymentMethod },\r\n              {\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                  Authorization: `Bearer ${this.token}`,\r\n                },\r\n              }\r\n            );\r\n            // Handle successful card payment response\r\n            this.handleCardPaymentResponse(paymentResponse.data);\r\n          }\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 400) {\r\n            console.log(\"Checkout failed:\", error.response.data);\r\n          } else {\r\n            console.error(\"An unexpected error occurred:\", error);\r\n          }\r\n        }\r\n\r\n        // Reset states and close popups\r\n        this.showPaymentConfirmation = false;\r\n        this.selectedPaymentMethod = null;\r\n        this.showReceiptPopup = true;\r\n      } else {\r\n        // Close the confirmation popup without proceeding\r\n        this.showPaymentConfirmation = false;\r\n      }\r\n    },\r\n    async handleReceiptSelection(wantsReceipt) {\r\n      this.showReceiptPopup = false;\r\n\r\n      // If the user wants a receipt, print it first\r\n      if (wantsReceipt) {\r\n        this.showModal = false;\r\n        this.printReceipt(); // Print receipt first\r\n        console.log(\"User wants a receipt.\");\r\n      } else {\r\n        this.showModal = false;\r\n        console.log(\"User does not want a receipt.\");\r\n      }\r\n\r\n      // Wait for createNewOrder to complete\r\n      await this.createNewOrder();\r\n\r\n      // Reset the discount input to 0\r\n      this.discountPercentage = 0;\r\n      this.flatDiscountAmount = 0;\r\n\r\n      // Delay clearing the UI state for orderItems by 3 seconds\r\n      setTimeout(() => {\r\n        this.$emit(\"clear-order-items\");\r\n      }, 3000);\r\n    },\r\n    async printReceipt() {\r\n      try {\r\n        // Retrieve all orders with sorting by date (most recent first)\r\n        const ordersResponse = await axios.get(\r\n          `${this.apiBaseUrl}/orders?sort=date_desc&page=1&per_page=1`, // Assuming API supports sorting by date and pagination\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        // Ensure we get a valid order from the response\r\n        const ordersData = ordersResponse.data.data.list;\r\n        if (ordersData.length === 0) {\r\n          alert(\"No orders found.\");\r\n          return;\r\n        }\r\n\r\n        // Get the most recent order (the first in the sorted list)\r\n        const order = ordersData[0];\r\n\r\n        // Log the order ID of the most recent order\r\n        console.log(\"Order ID for printing:\", order.id);\r\n\r\n        // Call the print document endpoint directly with the most recent order ID\r\n        const printResponse = await axios.post(\r\n          `${this.apiBaseUrl}/orders/print-document`,\r\n          {\r\n            order_id: order.id, // Pass the most recent order ID here\r\n            print_type: \"RECEIPT\", // Print type is always 'RECEIPT'\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n        this.handlePrintReceiptResponse(printResponse.data);\r\n      } catch (error) {\r\n        console.error(\"Error printing receipt:\", error);\r\n      }\r\n    },\r\n    handleCheckoutResponse(response) {\r\n      if (response.status === \"success\") {\r\n        // Proceed to payment confirmation step\r\n        this.showPaymentConfirmation = true;\r\n      } else if (response.status === \"fail\") {\r\n        // Handle failure scenarios, e.g., show an error message\r\n        console.error(\"Checkout failed:\", response.data.message);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    document.addEventListener(\"click\", this.handleOutsideClick);\r\n  },\r\n  beforeUnmount() {\r\n    document.removeEventListener(\"click\", this.handleOutsideClick);\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}