{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 1\n};\nconst _hoisted_2 = {\n  class: \"container-fluid main-content\"\n};\nconst _hoisted_3 = {\n  class: \"row\"\n};\nconst _hoisted_4 = {\n  class: \"col-2\"\n};\nconst _hoisted_5 = {\n  class: \"col-5\",\n  style: {\n    \"padding\": \"20px\"\n  }\n};\nconst _hoisted_6 = {\n  class: \"col-5\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_LoginComponent = _resolveComponent(\"LoginComponent\");\n  const _component_HeaderComponent = _resolveComponent(\"HeaderComponent\");\n  const _component_SidebarComponent = _resolveComponent(\"SidebarComponent\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  const _component_CashRegister = _resolveComponent(\"CashRegister\");\n  const _component_ErrorPopup = _resolveComponent(\"ErrorPopup\");\n  return _openBlock(), _createElementBlock(\"div\", null, [!$data.token ? (_openBlock(), _createBlock(_component_LoginComponent, {\n    key: 0,\n    \"api-base-url\": $props.apiBaseUrl,\n    translations: $props.translations,\n    onLoginSuccess: $options.setToken\n  }, null, 8 /* PROPS */, [\"api-base-url\", \"translations\", \"onLoginSuccess\"])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_HeaderComponent, {\n    \"api-base-url\": $props.apiBaseUrl,\n    translations: $props.translations,\n    \"disable-focus\": $data.disableFocus,\n    token: $data.token,\n    user: $data.user,\n    onProductScanned: $options.addProductToOrder,\n    onLogout: $options.logout\n  }, null, 8 /* PROPS */, [\"api-base-url\", \"translations\", \"disable-focus\", \"token\", \"user\", \"onProductScanned\", \"onLogout\"]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_SidebarComponent)]), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_router_view, {\n    \"api-base-url\": $props.apiBaseUrl,\n    orderItems: $data.orderItems,\n    translations: $props.translations,\n    token: $data.token,\n    onFocusStateChange: $options.updateFocusState\n  }, null, 8 /* PROPS */, [\"api-base-url\", \"orderItems\", \"translations\", \"token\", \"onFocusStateChange\"])]), _createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_CashRegister, {\n    \"api-base-url\": $props.apiBaseUrl,\n    orderItems: $data.orderItems,\n    translations: $props.translations,\n    token: $data.token,\n    onRemoveItem: $options.removeProductFromOrder,\n    onUpdateQuantity: $options.updateItemQuantity,\n    onSetQuantity: $options.setItemQuantity,\n    onClearOrderItems: $options.clearOrderItems,\n    onModalStateChange: $options.updateModalState\n  }, null, 8 /* PROPS */, [\"api-base-url\", \"orderItems\", \"translations\", \"token\", \"onRemoveItem\", \"onUpdateQuantity\", \"onSetQuantity\", \"onClearOrderItems\", \"onModalStateChange\"])])])]), _createVNode(_component_ErrorPopup, {\n    ref: \"errorPopup\"\n  }, null, 512 /* NEED_PATCH */)]))]);\n}","map":{"version":3,"names":["key","class","style","_createElementBlock","$data","token","_createBlock","_component_LoginComponent","$props","apiBaseUrl","translations","onLoginSuccess","$options","setToken","_hoisted_1","_createVNode","_component_HeaderComponent","disableFocus","user","onProductScanned","addProductToOrder","onLogout","logout","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_component_SidebarComponent","_hoisted_5","_component_router_view","orderItems","onFocusStateChange","updateFocusState","_hoisted_6","_component_CashRegister","onRemoveItem","removeProductFromOrder","onUpdateQuantity","updateItemQuantity","onSetQuantity","setItemQuantity","onClearOrderItems","clearOrderItems","onModalStateChange","updateModalState","_component_ErrorPopup","ref"],"sources":["C:\\wamp64\\www\\tbpos\\src\\front\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <LoginComponent\r\n      v-if=\"!token\"\r\n      :api-base-url=\"apiBaseUrl\"\r\n      :translations=\"translations\"\r\n      @login-success=\"setToken\"\r\n    />\r\n    <div v-else>\r\n      <HeaderComponent\r\n        :api-base-url=\"apiBaseUrl\"\r\n        :translations=\"translations\"\r\n        :disable-focus=\"disableFocus\"\r\n        :token=\"token\"\r\n        :user=\"user\"\r\n        @product-scanned=\"addProductToOrder\"\r\n        @logout=\"logout\"\r\n      />\r\n      <div class=\"container-fluid main-content\">\r\n        <div class=\"row\">\r\n          <div class=\"col-2\">\r\n            <SidebarComponent />\r\n          </div>\r\n          <div class=\"col-5\" style=\"padding: 20px\">\r\n            <router-view\r\n              :api-base-url=\"apiBaseUrl\"\r\n              :orderItems=\"orderItems\"\r\n              :translations=\"translations\"\r\n              :token=\"token\"\r\n              @focus-state-change=\"updateFocusState\"\r\n            />\r\n          </div>\r\n          <div class=\"col-5\">\r\n            <CashRegister\r\n              :api-base-url=\"apiBaseUrl\"\r\n              :orderItems=\"orderItems\"\r\n              :translations=\"translations\"\r\n              :token=\"token\"\r\n              @remove-item=\"removeProductFromOrder\"\r\n              @update-quantity=\"updateItemQuantity\"\r\n              @set-quantity=\"setItemQuantity\"\r\n              @clear-order-items=\"clearOrderItems\"\r\n              @modal-state-change=\"updateModalState\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ErrorPopup ref=\"errorPopup\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport LoginComponent from \"./components/LoginComponent.vue\";\r\nimport CashRegister from \"./components/CashRegister.vue\";\r\nimport HeaderComponent from \"./components/HeaderComponent.vue\";\r\nimport SidebarComponent from \"./components/SidebarComponent.vue\";\r\nimport ErrorPopup from \"./components/ErrorPopup.vue\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  components: {\r\n    LoginComponent,\r\n    CashRegister,\r\n    HeaderComponent,\r\n    SidebarComponent,\r\n    ErrorPopup,\r\n  },\r\n  watch: {\r\n    token(newToken) {\r\n      if (newToken) {\r\n        // If the user logs in, start tracking inactivity\r\n        this.setupInactivityListener();\r\n      } else {\r\n        // If the user logs out, stop tracking inactivity\r\n        this.cleanupInactivityListener();\r\n      }\r\n    },\r\n  },\r\n  props: {\r\n    apiBaseUrl: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    translations: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      orderItems: [],\r\n      token: null,\r\n      user: null,\r\n      disableFocus: false,\r\n      inactivityTimeout: null,\r\n      tokenExpirationTime: null, // Timestamp when the token will expire\r\n      tokenExchangeTimeout: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async fetchCurrentOrder() {\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/orders/current`, {\r\n          headers: { Authorization: `Bearer ${this.token}` },\r\n        });\r\n\r\n        // Extract lines safely\r\n        const cart = response.data?.data?.cart;\r\n        if (cart && Array.isArray(cart.lines)) {\r\n          this.orderItems = cart.lines.map((line) => ({\r\n            product_id: line.product_id,\r\n            refcode: line.reference,\r\n            name: line.name,\r\n            price_tax_incl: line.price_tax_incl,\r\n            price_tax_excl: line.price_tax_excl,\r\n            quantity: line.quantity,\r\n            image_url: line.image_url,\r\n          }));\r\n        } else {\r\n          console.warn(\"No cart or lines data available in the response.\");\r\n          this.orderItems = [];\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching current order:\", error);\r\n      }\r\n    },\r\n    async addProductToOrder(product) {\r\n      // Find if the product is already in the order\r\n      let existingItem = this.orderItems.find(\r\n        (item) => item.refcode === product.refcode\r\n      );\r\n\r\n      // Check local stock before making the API call\r\n      if (existingItem && existingItem.quantity + 1 > product.stock) {\r\n        alert(`Cannot add more than available stock of ${product.stock}`);\r\n        return; // Exit without updating if it exceeds stock\r\n      } else if (!existingItem && product.stock < 1) {\r\n        alert(this.translations.outOfStock);\r\n        return;\r\n      }\r\n\r\n      // Make the API request to add the product to the order\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/add-product-to-order`,\r\n          { refcode: product.refcode, quantity: 1 },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        // Check response for OUT_OF_STOCK error\r\n        if (\r\n          response.data.status === \"fail\" &&\r\n          response.data.data.code === \"OUT_OF_STOCK\"\r\n        ) {\r\n          const quantityAvailable = response.data.data.quantityAvailable;\r\n          alert(\r\n            `Only ${quantityAvailable} items are available in stock. Please adjust your quantity.`\r\n          );\r\n\r\n          // Adjust existing item quantity in UI to match available stock\r\n          if (existingItem) {\r\n            existingItem.quantity = quantityAvailable;\r\n          }\r\n          return; // Exit without adding further items\r\n        }\r\n\r\n        // If the response is successful, update orderItems in the UI\r\n        if (existingItem) {\r\n          existingItem.quantity += 1;\r\n        } else {\r\n          this.orderItems.push({\r\n            ...product,\r\n            quantity: 1,\r\n          });\r\n        }\r\n\r\n        console.log(\"Updated order summary:\", response.data);\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 422) {\r\n          this.$refs.errorPopup.showPopup(this.translations.outOfStock);\r\n        } else {\r\n          console.error(\"Error adding product to order:\", error);\r\n        }\r\n      }\r\n    },\r\n    async removeProductFromOrder(refcode) {\r\n      const previousItems = [...this.orderItems];\r\n      this.orderItems = this.orderItems.filter(\r\n        (item) => item.refcode !== refcode\r\n      );\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/orders/delete-product-from-order`,\r\n          {\r\n            refcode: refcode,\r\n          },\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${this.token}`,\r\n            },\r\n          }\r\n        );\r\n\r\n        if (response.data.status === \"success\") {\r\n          console.log(\"Item successfully deleted from the order.\");\r\n        } else if (response.data.status === \"fail\") {\r\n          this.handleError(response.data.data);\r\n          this.orderItems = previousItems; // Restore previous items\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error removing product from order:\", error);\r\n        this.orderItems = previousItems; // Restore previous items\r\n      }\r\n    },\r\n    async updateItemQuantity({ refcode, quantity }) {\r\n      const itemIndex = this.orderItems.findIndex(\r\n        (item) => item.refcode === refcode\r\n      );\r\n\r\n      if (itemIndex !== -1) {\r\n        const item = this.orderItems[itemIndex];\r\n        const newQuantity = item.quantity + quantity;\r\n\r\n        // If the quantity is zero, call removeProductFromOrder and exit\r\n        if (newQuantity <= 0) {\r\n          this.removeProductFromOrder(refcode); // Call remove method\r\n          return; // Exit the function without further processing\r\n        }\r\n\r\n        // Check stock before updating\r\n        if (newQuantity > item.stock) {\r\n          alert(`Cannot update quantity. Available stock is ${item.stock}.`);\r\n          return; // Exit without updating if it exceeds stock\r\n        }\r\n\r\n        // Make the API call to update quantity\r\n        try {\r\n          const response = await axios.post(\r\n            `${this.apiBaseUrl}/orders/change-quantity`,\r\n            { refcode: refcode, quantity: newQuantity },\r\n            {\r\n              headers: { Authorization: `Bearer ${this.token}` },\r\n            }\r\n          );\r\n\r\n          // Check for OUT_OF_STOCK error in response\r\n          if (\r\n            response.data.status === \"fail\" &&\r\n            response.data.data.code === \"OUT_OF_STOCK\"\r\n          ) {\r\n            const quantityAvailable = response.data.data.quantityAvailable;\r\n            alert(\r\n              `Only ${quantityAvailable} items are available in stock. Please adjust your quantity.`\r\n            );\r\n\r\n            // Adjust the item quantity if it exceeds available stock\r\n            item.quantity = quantityAvailable;\r\n            return; // Exit without adding further items\r\n          }\r\n\r\n          // If the response is successful, update the orderItems in the UI\r\n          item.quantity = newQuantity;\r\n\r\n          console.log(\"Updated order summary:\", response.data);\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 422) {\r\n            this.$refs.errorPopup.showPopup(this.translations.outOfStock);\r\n          } else {\r\n            console.error(\"Error updating product quantity:\", error);\r\n          }\r\n        }\r\n      } else {\r\n        console.error(`Item with refcode ${refcode} not found in the order.`);\r\n      }\r\n    },\r\n    async setItemQuantity({ refcode, setQuantity }) {\r\n      const itemIndex = this.orderItems.findIndex(\r\n        (item) => item.refcode === refcode\r\n      );\r\n\r\n      if (itemIndex !== -1) {\r\n        const item = this.orderItems[itemIndex];\r\n\r\n        // Check if the requested quantity exceeds stock\r\n        if (setQuantity > item.stock) {\r\n          this.$refs.errorPopup.showPopup(\r\n            `Requested quantity of ${setQuantity} exceeds available stock of ${item.stock}.`\r\n          );\r\n          return; // Prevent further processing if quantity exceeds stock\r\n        }\r\n\r\n        // API call to update quantity on the server\r\n        try {\r\n          const response = await axios.post(\r\n            `${this.apiBaseUrl}/orders/change-quantity`,\r\n            { refcode: refcode, quantity: setQuantity },\r\n            {\r\n              headers: { Authorization: `Bearer ${this.token}` },\r\n            }\r\n          );\r\n\r\n          // Handle stock errors from the API response\r\n          if (\r\n            response.data.status === \"fail\" &&\r\n            response.data.data.code === \"OUT_OF_STOCK\"\r\n          ) {\r\n            const quantityAvailable = response.data.data.quantityAvailable;\r\n            this.$refs.errorPopup.showPopup(\r\n              `Only ${quantityAvailable} items are available. Adjusting quantity to available stock.`\r\n            );\r\n            item.quantity = quantityAvailable; // Set quantity to available stock\r\n            return; // Exit if out of stock\r\n          }\r\n\r\n          // If the response is successful, update the orderItems in the UI\r\n          item.quantity = setQuantity;\r\n          console.log(\"Quantity successfully updated:\", response.data);\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 422) {\r\n            this.$refs.errorPopup.showPopup(this.translations.outOfStock);\r\n          } else {\r\n            console.error(\"Error updating quantity:\", error);\r\n          }\r\n        }\r\n      } else {\r\n        console.error(`Item with refcode ${refcode} not found in the order.`);\r\n      }\r\n    },\r\n    clearOrderItems() {\r\n      this.orderItems = [];\r\n    },\r\n    updateModalState(state) {\r\n      this.disableFocus = state; // Disable focus when modal is shown\r\n    },\r\n    updateFocusState(isFocused) {\r\n      this.disableFocus = isFocused;\r\n    },\r\n    logout() {\r\n      // Remove the token and workstation from localStorage\r\n      this.clearTokenData();\r\n    },\r\n    resetInactivityTimer() {\r\n      // Clear the existing timeout\r\n      if (this.inactivityTimeout) {\r\n        clearTimeout(this.inactivityTimeout);\r\n      }\r\n\r\n      // Set a new timeout for 15 minutes\r\n      this.inactivityTimeout = setTimeout(() => {\r\n        this.logout();\r\n      }, 15 * 60 * 1000); // 15 minutes in milliseconds\r\n    },\r\n    setupInactivityListener() {\r\n      // Events that reset the inactivity timer\r\n      const events = [\"mousemove\", \"keydown\", \"click\", \"scroll\"];\r\n\r\n      // Add listeners to reset the timer on user interaction\r\n      events.forEach((event) => {\r\n        window.addEventListener(event, this.resetInactivityTimer);\r\n      });\r\n\r\n      // Start the initial inactivity timer\r\n      this.resetInactivityTimer();\r\n    },\r\n    cleanupInactivityListener() {\r\n      // Clear the timeout\r\n      if (this.inactivityTimeout) {\r\n        clearTimeout(this.inactivityTimeout);\r\n      }\r\n\r\n      // Remove event listeners\r\n      const events = [\"mousemove\", \"keydown\", \"click\", \"scroll\"];\r\n      events.forEach((event) => {\r\n        window.removeEventListener(event, this.resetInactivityTimer);\r\n      });\r\n    },\r\n    async setToken(token, isExchange = false) {\r\n      try {\r\n        const response = await axios.get(`${this.apiBaseUrl}/token`, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n\r\n        if (response.data.status === \"success\") {\r\n          const { firstname, lastname, token: tokenData } = response.data.data;\r\n          const { expiresIn } = tokenData; // Extract expiresIn from the token object\r\n\r\n          this.token = token;\r\n          this.user = { firstName: firstname, lastName: lastname };\r\n\r\n          console.log(\"ExpiresIn received:\", expiresIn);\r\n          console.log(\"Full API response:\", response.data);\r\n\r\n          // Calculate and store the token expiration time\r\n          this.tokenExpirationTime = Date.now() + expiresIn * 1000;\r\n          localStorage.setItem(\"authToken\", token);\r\n          localStorage.setItem(\"userFirstName\", firstname);\r\n          localStorage.setItem(\"userLastName\", lastname);\r\n          localStorage.setItem(\"tokenExpirationTime\", this.tokenExpirationTime);\r\n\r\n          // Schedule token exchange if it's not during an exchange call\r\n          if (!isExchange) {\r\n            this.scheduleTokenExchange(expiresIn);\r\n          }\r\n          return true;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error validating token:\", error);\r\n      }\r\n\r\n      this.clearTokenData();\r\n      return false;\r\n    },\r\n    scheduleTokenExchange(expiresIn) {\r\n      if (!expiresIn || isNaN(expiresIn)) {\r\n        console.error(\r\n          \"Invalid expiresIn value. Cannot schedule token exchange.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      const exchangeInMs = (expiresIn - 300) * 1000;\r\n\r\n      if (exchangeInMs <= 0) {\r\n        console.warn(\"Token has less than 60 seconds. Exchanging immediately.\");\r\n        this.exchangeToken();\r\n        return;\r\n      }\r\n\r\n      if (this.tokenExchangeTimeout) {\r\n        clearTimeout(this.tokenExchangeTimeout);\r\n      }\r\n\r\n      this.tokenExchangeTimeout = setTimeout(() => {\r\n        this.exchangeToken();\r\n      }, exchangeInMs);\r\n\r\n      console.log(\r\n        `Token exchange scheduled in ${(exchangeInMs / 1000).toFixed(\r\n          1\r\n        )} seconds.`\r\n      );\r\n    },\r\n    async exchangeToken() {\r\n      try {\r\n        const response = await axios.post(\r\n          `${this.apiBaseUrl}/token/exchange`,\r\n          {},\r\n          {\r\n            headers: { Authorization: `Bearer ${this.token}` },\r\n          }\r\n        );\r\n\r\n        if (response.status === 200) {\r\n          const newToken = response.data.data.token.value;\r\n          console.log(\"Token exchanged successfully.\");\r\n          await this.setToken(newToken, true); // Pass true to avoid rescheduling\r\n        } else {\r\n          console.warn(\"Token exchange failed. Logging out.\");\r\n          this.logout();\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error exchanging token:\", error);\r\n        this.logout();\r\n      }\r\n    },\r\n    clearTokenData() {\r\n      this.token = null;\r\n      this.user = null;\r\n      this.tokenExpirationTime = null;\r\n\r\n      localStorage.removeItem(\"authToken\");\r\n      localStorage.removeItem(\"userFirstName\");\r\n      localStorage.removeItem(\"userLastName\");\r\n      localStorage.removeItem(\"tokenExpirationTime\");\r\n\r\n      if (this.tokenExchangeTimeout) clearTimeout(this.tokenExchangeTimeout);\r\n    },\r\n    handleError(errorData) {\r\n      switch (errorData.code) {\r\n        case \"NOT_FOUND\":\r\n          console.error(\"Product not found:\", errorData.message);\r\n          break;\r\n        case \"BAD_REQUEST\":\r\n          console.error(\"Bad request:\", errorData.message);\r\n          break;\r\n        case \"OUT_OF_STOCK\":\r\n          console.error(\"Out of stock:\", errorData.message);\r\n          alert(\"This product is currently out of stock.\");\r\n          break;\r\n        case \"MINIMAL_QUANTITY_REQUIRED\":\r\n          console.error(\"Minimum quantity required:\", errorData.message);\r\n          break;\r\n        default:\r\n          console.error(\"An unknown error occurred.\");\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    const storedToken = localStorage.getItem(\"authToken\");\r\n    const storedExpirationTime = parseInt(\r\n      localStorage.getItem(\"tokenExpirationTime\"),\r\n      10\r\n    );\r\n\r\n    if (storedToken && storedExpirationTime > Date.now()) {\r\n      const expiresIn = (storedExpirationTime - Date.now()) / 1000;\r\n\r\n      this.setToken(storedToken).then((isValid) => {\r\n        if (isValid) {\r\n          this.scheduleTokenExchange(expiresIn);\r\n          this.fetchCurrentOrder(); // Fetch order only if token is valid\r\n        } else {\r\n          console.warn(\"Stored token is invalid. Logging out.\");\r\n          this.logout();\r\n        }\r\n      });\r\n    } else {\r\n      console.warn(\"No valid token found. Redirecting to login.\");\r\n      this.logout();\r\n    }\r\n    if (this.token) {\r\n      this.fetchCurrentOrder();\r\n      this.setupInactivityListener();\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    if (this.tokenExchangeTimeout) {\r\n      clearTimeout(this.tokenExchangeTimeout); // Clean up the timer\r\n    }\r\n    this.cleanupInactivityListener();\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAkBWC,KAAK,EAAC;AAA8B;;EAClCA,KAAK,EAAC;AAAK;;EACTA,KAAK,EAAC;AAAO;;EAGbA,KAAK,EAAC,OAAO;EAACC,KAAqB,EAArB;IAAA;EAAA;;;EASdD,KAAK,EAAC;AAAO;;;;;;;;uBA/B1BE,mBAAA,CAgDM,c,CA9CKC,KAAA,CAAAC,KAAK,I,cADdC,YAAA,CAKEC,yBAAA;IAPNP,GAAA;IAIO,cAAY,EAAEQ,MAAA,CAAAC,UAAU;IACxBC,YAAY,EAAEF,MAAA,CAAAE,YAAY;IAC1BC,cAAa,EAAEC,QAAA,CAAAC;gGAElBV,mBAAA,CAwCM,OAhDVW,UAAA,GASMC,YAAA,CAQEC,0BAAA;IAPC,cAAY,EAAER,MAAA,CAAAC,UAAU;IACxBC,YAAY,EAAEF,MAAA,CAAAE,YAAY;IAC1B,eAAa,EAAEN,KAAA,CAAAa,YAAY;IAC3BZ,KAAK,EAAED,KAAA,CAAAC,KAAK;IACZa,IAAI,EAAEd,KAAA,CAAAc,IAAI;IACVC,gBAAe,EAAEP,QAAA,CAAAQ,iBAAiB;IAClCC,QAAM,EAAET,QAAA,CAAAU;+HAEXC,mBAAA,CA4BM,OA5BNC,UA4BM,GA3BJD,mBAAA,CA0BM,OA1BNE,UA0BM,GAzBJF,mBAAA,CAEM,OAFNG,UAEM,GADJX,YAAA,CAAoBY,2BAAA,E,GAEtBJ,mBAAA,CAQM,OARNK,UAQM,GAPJb,YAAA,CAMEc,sBAAA;IALC,cAAY,EAAErB,MAAA,CAAAC,UAAU;IACxBqB,UAAU,EAAE1B,KAAA,CAAA0B,UAAU;IACtBpB,YAAY,EAAEF,MAAA,CAAAE,YAAY;IAC1BL,KAAK,EAAED,KAAA,CAAAC,KAAK;IACZ0B,kBAAkB,EAAEnB,QAAA,CAAAoB;4GAGzBT,mBAAA,CAYM,OAZNU,UAYM,GAXJlB,YAAA,CAUEmB,uBAAA;IATC,cAAY,EAAE1B,MAAA,CAAAC,UAAU;IACxBqB,UAAU,EAAE1B,KAAA,CAAA0B,UAAU;IACtBpB,YAAY,EAAEF,MAAA,CAAAE,YAAY;IAC1BL,KAAK,EAAED,KAAA,CAAAC,KAAK;IACZ8B,YAAW,EAAEvB,QAAA,CAAAwB,sBAAsB;IACnCC,gBAAe,EAAEzB,QAAA,CAAA0B,kBAAkB;IACnCC,aAAY,EAAE3B,QAAA,CAAA4B,eAAe;IAC7BC,iBAAiB,EAAE7B,QAAA,CAAA8B,eAAe;IAClCC,kBAAkB,EAAE/B,QAAA,CAAAgC;0LAK7B7B,YAAA,CAA+B8B,qBAAA;IAAnBC,GAAG,EAAC;EAAY,+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}